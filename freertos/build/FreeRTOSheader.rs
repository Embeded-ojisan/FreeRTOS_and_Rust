/* automatically generated by rust-bindgen 0.59.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const TICK_TYPE_WIDTH_16_BITS: u32 = 0;
pub const TICK_TYPE_WIDTH_32_BITS: u32 = 1;
pub const TICK_TYPE_WIDTH_64_BITS: u32 = 2;
pub const configASSERT_DEFINED: u32 = 1;
pub const configQUEUE_REGISTRY_SIZE: u32 = 20;
pub const configUSE_PREEMPTION: u32 = 1;
pub const configUSE_TIME_SLICING: u32 = 0;
pub const configUSE_PORT_OPTIMISED_TASK_SELECTION: u32 = 0;
pub const configUSE_IDLE_HOOK: u32 = 0;
pub const configUSE_TICK_HOOK: u32 = 0;
pub const configUSE_DAEMON_TASK_STARTUP_HOOK: u32 = 0;
pub const configMAX_TASK_NAME_LEN: u32 = 10;
pub const configUSE_TRACE_FACILITY: u32 = 0;
pub const configUSE_16_BIT_TICKS: u32 = 0;
pub const configIDLE_SHOULD_YIELD: u32 = 0;
pub const configUSE_CO_ROUTINES: u32 = 0;
pub const configMAX_PRIORITIES: u32 = 10;
pub const configMAX_CO_ROUTINE_PRIORITIES: u32 = 2;
pub const configTIMER_QUEUE_LENGTH: u32 = 5;
pub const configTIMER_TASK_PRIORITY: u32 = 9;
pub const configUSE_COUNTING_SEMAPHORES: u32 = 1;
pub const configSUPPORT_DYNAMIC_ALLOCATION: u32 = 0;
pub const configSUPPORT_STATIC_ALLOCATION: u32 = 1;
pub const configNUM_TX_DESCRIPTORS: u32 = 15;
pub const configSTREAM_BUFFER_TRIGGER_LEVEL_TEST_MARGIN: u32 = 2;
pub const configCHECK_FOR_STACK_OVERFLOW: u32 = 0;
pub const configALLOW_UNPRIVILEGED_CRITICAL_SECTIONS: u32 = 0;
pub const configUSE_MALLOC_FAILED_HOOK: u32 = 1;
pub const configUSE_MUTEXES: u32 = 1;
pub const configUSE_RECURSIVE_MUTEXES: u32 = 1;
pub const configUSE_TIMERS: u32 = 1;
pub const INCLUDE_vTaskPrioritySet: u32 = 1;
pub const INCLUDE_uxTaskPriorityGet: u32 = 1;
pub const INCLUDE_vTaskDelete: u32 = 1;
pub const INCLUDE_vTaskCleanUpResources: u32 = 0;
pub const INCLUDE_vTaskSuspend: u32 = 1;
pub const INCLUDE_vTaskDelayUntil: u32 = 1;
pub const INCLUDE_vTaskDelay: u32 = 1;
pub const INCLUDE_uxTaskGetStackHighWaterMark: u32 = 1;
pub const INCLUDE_uxTaskGetStackHighWaterMark2: u32 = 1;
pub const INCLUDE_xTaskGetSchedulerState: u32 = 1;
pub const INCLUDE_xTimerGetTimerDaemonTaskHandle: u32 = 1;
pub const INCLUDE_xTaskGetIdleTaskHandle: u32 = 1;
pub const INCLUDE_xTaskGetHandle: u32 = 1;
pub const INCLUDE_eTaskGetState: u32 = 1;
pub const INCLUDE_xSemaphoreGetMutexHolder: u32 = 1;
pub const INCLUDE_xTimerPendFunctionCall: u32 = 1;
pub const INCLUDE_xTaskAbortDelay: u32 = 1;
pub const projCOVERAGE_TEST: u32 = 0;
pub const configKERNEL_INTERRUPT_PRIORITY: u32 = 255;
pub const configMAX_SYSCALL_INTERRUPT_PRIORITY: u32 = 4;
pub const configMAC_INTERRUPT_PRIORITY: u32 = 5;
pub const configENFORCE_SYSTEM_CALLS_FROM_KERNEL_ONLY: u32 = 1;
pub const configUSE_MPU_WRAPPERS_V1: u32 = 0;
pub const configENABLE_ACCESS_CONTROL_LIST: u32 = 1;
pub const configPROTECTED_KERNEL_OBJECT_POOL_SIZE: u32 = 150;
pub const configSYSTEM_CALL_STACK_SIZE: u32 = 128;
pub const configKERNEL_PROVIDED_STATIC_MEMORY: u32 = 1;
pub const configTICK_TYPE_WIDTH_IN_BITS: u32 = 1;
pub const configNUMBER_OF_CORES: u32 = 1;
pub const errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: i32 = -1;
pub const errQUEUE_BLOCKED: i32 = -4;
pub const errQUEUE_YIELD: i32 = -5;
pub const configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES: u32 = 0;
pub const pdINTEGRITY_CHECK_VALUE: u32 = 1515870810;
pub const pdFREERTOS_ERRNO_NONE: u32 = 0;
pub const pdFREERTOS_ERRNO_ENOENT: u32 = 2;
pub const pdFREERTOS_ERRNO_EINTR: u32 = 4;
pub const pdFREERTOS_ERRNO_EIO: u32 = 5;
pub const pdFREERTOS_ERRNO_ENXIO: u32 = 6;
pub const pdFREERTOS_ERRNO_EBADF: u32 = 9;
pub const pdFREERTOS_ERRNO_EAGAIN: u32 = 11;
pub const pdFREERTOS_ERRNO_EWOULDBLOCK: u32 = 11;
pub const pdFREERTOS_ERRNO_ENOMEM: u32 = 12;
pub const pdFREERTOS_ERRNO_EACCES: u32 = 13;
pub const pdFREERTOS_ERRNO_EFAULT: u32 = 14;
pub const pdFREERTOS_ERRNO_EBUSY: u32 = 16;
pub const pdFREERTOS_ERRNO_EEXIST: u32 = 17;
pub const pdFREERTOS_ERRNO_EXDEV: u32 = 18;
pub const pdFREERTOS_ERRNO_ENODEV: u32 = 19;
pub const pdFREERTOS_ERRNO_ENOTDIR: u32 = 20;
pub const pdFREERTOS_ERRNO_EISDIR: u32 = 21;
pub const pdFREERTOS_ERRNO_EINVAL: u32 = 22;
pub const pdFREERTOS_ERRNO_ENOSPC: u32 = 28;
pub const pdFREERTOS_ERRNO_ESPIPE: u32 = 29;
pub const pdFREERTOS_ERRNO_EROFS: u32 = 30;
pub const pdFREERTOS_ERRNO_EUNATCH: u32 = 42;
pub const pdFREERTOS_ERRNO_EBADE: u32 = 50;
pub const pdFREERTOS_ERRNO_EFTYPE: u32 = 79;
pub const pdFREERTOS_ERRNO_ENMFILE: u32 = 89;
pub const pdFREERTOS_ERRNO_ENOTEMPTY: u32 = 90;
pub const pdFREERTOS_ERRNO_ENAMETOOLONG: u32 = 91;
pub const pdFREERTOS_ERRNO_EOPNOTSUPP: u32 = 95;
pub const pdFREERTOS_ERRNO_EAFNOSUPPORT: u32 = 97;
pub const pdFREERTOS_ERRNO_ENOBUFS: u32 = 105;
pub const pdFREERTOS_ERRNO_ENOPROTOOPT: u32 = 109;
pub const pdFREERTOS_ERRNO_EADDRINUSE: u32 = 112;
pub const pdFREERTOS_ERRNO_ETIMEDOUT: u32 = 116;
pub const pdFREERTOS_ERRNO_EINPROGRESS: u32 = 119;
pub const pdFREERTOS_ERRNO_EALREADY: u32 = 120;
pub const pdFREERTOS_ERRNO_EADDRNOTAVAIL: u32 = 125;
pub const pdFREERTOS_ERRNO_EISCONN: u32 = 127;
pub const pdFREERTOS_ERRNO_ENOTCONN: u32 = 128;
pub const pdFREERTOS_ERRNO_ENOMEDIUM: u32 = 135;
pub const pdFREERTOS_ERRNO_EILSEQ: u32 = 138;
pub const pdFREERTOS_ERRNO_ECANCELED: u32 = 140;
pub const pdFREERTOS_LITTLE_ENDIAN: u32 = 0;
pub const pdFREERTOS_BIG_ENDIAN: u32 = 1;
pub const pdLITTLE_ENDIAN: u32 = 0;
pub const pdBIG_ENDIAN: u32 = 1;
pub const portTICK_TYPE_IS_ATOMIC: u32 = 1;
pub const portSTACK_GROWTH: i32 = -1;
pub const portBYTE_ALIGNMENT: u32 = 8;
pub const portNVIC_PENDSVSET_BIT: u32 = 268435456;
pub const portBYTE_ALIGNMENT_MASK: u32 = 7;
pub const portUSING_MPU_WRAPPERS: u32 = 0;
pub const portNUM_CONFIGURABLE_REGIONS: u32 = 1;
pub const portHAS_STACK_OVERFLOW_CHECKING: u32 = 0;
pub const configSTACK_ALLOCATION_FROM_SEPARATE_HEAP: u32 = 0;
pub const configUSE_NEWLIB_REENTRANT: u32 = 0;
pub const configUSE_PICOLIBC_TLS: u32 = 0;
pub const configUSE_C_RUNTIME_TLS_SUPPORT: u32 = 0;
pub const INCLUDE_xTaskDelayUntil: u32 = 1;
pub const INCLUDE_xQueueGetMutexHolder: u32 = 0;
pub const INCLUDE_xTaskResumeFromISR: u32 = 1;
pub const INCLUDE_xTaskGetCurrentTaskHandle: u32 = 1;
pub const configUSE_APPLICATION_TASK_TAG: u32 = 0;
pub const configNUM_THREAD_LOCAL_STORAGE_POINTERS: u32 = 0;
pub const configUSE_TASK_PREEMPTION_DISABLE: u32 = 0;
pub const configUSE_ALTERNATIVE_API: u32 = 0;
pub const portCRITICAL_NESTING_IN_TCB: u32 = 0;
pub const configPRECONDITION_DEFINED: u32 = 0;
pub const configCHECK_HANDLER_INSTALLATION: u32 = 1;
pub const configRUN_MULTIPLE_PRIORITIES: u32 = 0;
pub const configUSE_CORE_AFFINITY: u32 = 0;
pub const configUSE_PASSIVE_IDLE_HOOK: u32 = 0;
pub const portHAS_NESTED_INTERRUPTS: u32 = 1;
pub const configUSE_MINI_LIST_ITEM: u32 = 1;
pub const configRECORD_STACK_HIGH_ADDRESS: u32 = 0;
pub const configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H: u32 = 0;
pub const configGENERATE_RUN_TIME_STATS: u32 = 0;
pub const configEXPECTED_IDLE_TIME_BEFORE_SLEEP: u32 = 2;
pub const configUSE_TICKLESS_IDLE: u32 = 0;
pub const configUSE_QUEUE_SETS: u32 = 0;
pub const configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS: u32 = 0;
pub const configUSE_STATS_FORMATTING_FUNCTIONS: u32 = 0;
pub const configAPPLICATION_ALLOCATED_HEAP: u32 = 0;
pub const configENABLE_HEAP_PROTECTOR: u32 = 0;
pub const configUSE_TASK_NOTIFICATIONS: u32 = 1;
pub const configTASK_NOTIFICATION_ARRAY_ENTRIES: u32 = 1;
pub const configUSE_POSIX_ERRNO: u32 = 0;
pub const configUSE_SB_COMPLETED_CALLBACK: u32 = 0;
pub const configSTATS_BUFFER_MAX_LENGTH: u32 = 65535;
pub const configINITIAL_TICK_COUNT: u32 = 0;
pub const configENABLE_BACKWARD_COMPATIBILITY: u32 = 1;
pub const configUSE_TASK_FPU_SUPPORT: u32 = 1;
pub const configENABLE_MPU: u32 = 0;
pub const configENABLE_FPU: u32 = 1;
pub const configENABLE_MVE: u32 = 0;
pub const configENABLE_TRUSTZONE: u32 = 1;
pub const configRUN_FREERTOS_SECURE_ONLY: u32 = 0;
pub const configRUN_ADDITIONAL_TESTS: u32 = 0;
pub const tskKERNEL_VERSION_NUMBER: &'static [u8; 9usize] = b"V11.0.1+\0";
pub const tskKERNEL_VERSION_MAJOR: u32 = 11;
pub const tskKERNEL_VERSION_MINOR: u32 = 0;
pub const tskKERNEL_VERSION_BUILD: u32 = 1;
pub const tskMPU_REGION_READ_ONLY: u32 = 1;
pub const tskMPU_REGION_READ_WRITE: u32 = 2;
pub const tskMPU_REGION_EXECUTE_NEVER: u32 = 4;
pub const tskMPU_REGION_NORMAL_MEMORY: u32 = 8;
pub const tskMPU_REGION_DEVICE_MEMORY: u32 = 16;
pub const tskMPU_READ_PERMISSION: u32 = 1;
pub const tskMPU_WRITE_PERMISSION: u32 = 2;
pub const tskDEFAULT_INDEX_TO_NOTIFY: u32 = 0;
pub type size_t = cty::c_ulong;
pub type wchar_t = cty::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: cty::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = cty::c_uchar;
pub type __u_short = cty::c_ushort;
pub type __u_int = cty::c_uint;
pub type __u_long = cty::c_ulong;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_long;
pub type __uint64_t = cty::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = cty::c_long;
pub type __u_quad_t = cty::c_ulong;
pub type __intmax_t = cty::c_long;
pub type __uintmax_t = cty::c_ulong;
pub type __dev_t = cty::c_ulong;
pub type __uid_t = cty::c_uint;
pub type __gid_t = cty::c_uint;
pub type __ino_t = cty::c_ulong;
pub type __ino64_t = cty::c_ulong;
pub type __mode_t = cty::c_uint;
pub type __nlink_t = cty::c_ulong;
pub type __off_t = cty::c_long;
pub type __off64_t = cty::c_long;
pub type __pid_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [cty::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = cty::c_long;
pub type __rlim_t = cty::c_ulong;
pub type __rlim64_t = cty::c_ulong;
pub type __id_t = cty::c_uint;
pub type __time_t = cty::c_long;
pub type __useconds_t = cty::c_uint;
pub type __suseconds_t = cty::c_long;
pub type __suseconds64_t = cty::c_long;
pub type __daddr_t = cty::c_int;
pub type __key_t = cty::c_int;
pub type __clockid_t = cty::c_int;
pub type __timer_t = *mut cty::c_void;
pub type __blksize_t = cty::c_long;
pub type __blkcnt_t = cty::c_long;
pub type __blkcnt64_t = cty::c_long;
pub type __fsblkcnt_t = cty::c_ulong;
pub type __fsblkcnt64_t = cty::c_ulong;
pub type __fsfilcnt_t = cty::c_ulong;
pub type __fsfilcnt64_t = cty::c_ulong;
pub type __fsword_t = cty::c_long;
pub type __ssize_t = cty::c_long;
pub type __syscall_slong_t = cty::c_long;
pub type __syscall_ulong_t = cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut cty::c_char;
pub type __intptr_t = cty::c_long;
pub type __socklen_t = cty::c_uint;
pub type __sig_atomic_t = cty::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_long;
pub type int_fast32_t = cty::c_long;
pub type int_fast64_t = cty::c_long;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_ulong;
pub type uint_fast32_t = cty::c_ulong;
pub type uint_fast64_t = cty::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    pub fn ulGetRunTimeCounterValue() -> cty::c_ulong;
}
extern "C" {
    pub fn vLoggingPrintf(pcFormatString: *const cty::c_char, ...);
}
pub type TaskFunction_t = ::core::option::Option<unsafe extern "C" fn(arg: *mut cty::c_void)>;
pub type StackType_t = u32;
pub type BaseType_t = cty::c_long;
pub type UBaseType_t = cty::c_ulong;
pub type TickType_t = u32;
extern "C" {
    pub fn vPortEnterCritical();
}
extern "C" {
    pub fn vPortExitCritical();
}
extern "C" {
    pub fn vPortSuppressTicksAndSleep(xExpectedIdleTime: TickType_t);
}
extern "C" {
    pub fn vPortValidateInterruptPriority();
}
extern "C" {
    pub fn pxPortInitialiseStack(
        pxTopOfStack: *mut StackType_t,
        pxCode: TaskFunction_t,
        pvParameters: *mut cty::c_void,
    ) -> *mut StackType_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapRegion {
    pub pucStartAddress: *mut u8,
    pub xSizeInBytes: size_t,
}
#[test]
fn bindgen_test_layout_HeapRegion() {
    assert_eq!(
        ::core::mem::size_of::<HeapRegion>(),
        16usize,
        concat!("Size of: ", stringify!(HeapRegion))
    );
    assert_eq!(
        ::core::mem::align_of::<HeapRegion>(),
        8usize,
        concat!("Alignment of ", stringify!(HeapRegion))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<HeapRegion>())).pucStartAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapRegion),
            "::",
            stringify!(pucStartAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<HeapRegion>())).xSizeInBytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapRegion),
            "::",
            stringify!(xSizeInBytes)
        )
    );
}
pub type HeapRegion_t = HeapRegion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xHeapStats {
    pub xAvailableHeapSpaceInBytes: size_t,
    pub xSizeOfLargestFreeBlockInBytes: size_t,
    pub xSizeOfSmallestFreeBlockInBytes: size_t,
    pub xNumberOfFreeBlocks: size_t,
    pub xMinimumEverFreeBytesRemaining: size_t,
    pub xNumberOfSuccessfulAllocations: size_t,
    pub xNumberOfSuccessfulFrees: size_t,
}
#[test]
fn bindgen_test_layout_xHeapStats() {
    assert_eq!(
        ::core::mem::size_of::<xHeapStats>(),
        56usize,
        concat!("Size of: ", stringify!(xHeapStats))
    );
    assert_eq!(
        ::core::mem::align_of::<xHeapStats>(),
        8usize,
        concat!("Alignment of ", stringify!(xHeapStats))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xAvailableHeapSpaceInBytes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xAvailableHeapSpaceInBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xSizeOfLargestFreeBlockInBytes as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xSizeOfLargestFreeBlockInBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xSizeOfSmallestFreeBlockInBytes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xSizeOfSmallestFreeBlockInBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xHeapStats>())).xNumberOfFreeBlocks as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xNumberOfFreeBlocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xMinimumEverFreeBytesRemaining as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xMinimumEverFreeBytesRemaining)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xNumberOfSuccessfulAllocations as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xNumberOfSuccessfulAllocations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xHeapStats>())).xNumberOfSuccessfulFrees as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xNumberOfSuccessfulFrees)
        )
    );
}
pub type HeapStats_t = xHeapStats;
extern "C" {
    pub fn vPortDefineHeapRegions(pxHeapRegions: *const HeapRegion_t);
}
extern "C" {
    pub fn vPortGetHeapStats(pxHeapStats: *mut HeapStats_t);
}
extern "C" {
    pub fn pvPortMalloc(xSize: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn pvPortCalloc(xNum: size_t, xSize: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn vPortFree(pv: *mut cty::c_void);
}
extern "C" {
    pub fn vPortInitialiseBlocks();
}
extern "C" {
    pub fn xPortGetFreeHeapSize() -> size_t;
}
extern "C" {
    pub fn xPortGetMinimumEverFreeHeapSize() -> size_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " void vApplicationMallocFailedHook( void )"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " This hook function is called when allocation failed."]
    pub fn vApplicationMallocFailedHook();
}
extern "C" {
    pub fn xPortStartScheduler() -> BaseType_t;
}
extern "C" {
    pub fn vPortEndScheduler();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut cty::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_xSTATIC_LIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_LIST_ITEM>(),
        40usize,
        concat!("Size of: ", stringify!(xSTATIC_LIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_LIST_ITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST_ITEM>())).xDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST_ITEM),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST_ITEM>())).pvDummy3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST_ITEM),
            "::",
            stringify!(pvDummy3)
        )
    );
}
pub type StaticListItem_t = xSTATIC_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_MINI_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut cty::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_xSTATIC_MINI_LIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_MINI_LIST_ITEM>(),
        24usize,
        concat!("Size of: ", stringify!(xSTATIC_MINI_LIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_MINI_LIST_ITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_MINI_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_MINI_LIST_ITEM>())).xDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_MINI_LIST_ITEM),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSTATIC_MINI_LIST_ITEM>())).pvDummy3 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_MINI_LIST_ITEM),
            "::",
            stringify!(pvDummy3)
        )
    );
}
pub type StaticMiniListItem_t = xSTATIC_MINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST {
    pub uxDummy2: UBaseType_t,
    pub pvDummy3: *mut cty::c_void,
    pub xDummy4: StaticMiniListItem_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_LIST() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_LIST>(),
        40usize,
        concat!("Size of: ", stringify!(xSTATIC_LIST))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_LIST>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_LIST))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST>())).uxDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(uxDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST>())).pvDummy3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(pvDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST>())).xDummy4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(xDummy4)
        )
    );
}
pub type StaticList_t = xSTATIC_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TCB {
    pub pxDummy1: *mut cty::c_void,
    pub xDummy3: [StaticListItem_t; 2usize],
    pub uxDummy5: UBaseType_t,
    pub pxDummy6: *mut cty::c_void,
    pub ucDummy7: [u8; 10usize],
    pub uxDummy12: [UBaseType_t; 2usize],
    pub ulDummy18: [u32; 1usize],
    pub ucDummy19: [u8; 1usize],
    pub ucDummy21: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_TCB() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_TCB>(),
        144usize,
        concat!("Size of: ", stringify!(xSTATIC_TCB))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_TCB>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_TCB))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).pxDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(pxDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).xDummy3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).uxDummy5 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).pxDummy6 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(pxDummy6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).ucDummy7 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ucDummy7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).uxDummy12 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy12)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).ulDummy18 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ulDummy18)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).ucDummy19 as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ucDummy19)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).ucDummy21 as *const _ as usize },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ucDummy21)
        )
    );
}
pub type StaticTask_t = xSTATIC_TCB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_QUEUE {
    pub pvDummy1: [*mut cty::c_void; 3usize],
    pub u: xSTATIC_QUEUE__bindgen_ty_1,
    pub xDummy3: [StaticList_t; 2usize],
    pub uxDummy4: [UBaseType_t; 3usize],
    pub ucDummy5: [u8; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xSTATIC_QUEUE__bindgen_ty_1 {
    pub pvDummy2: *mut cty::c_void,
    pub uxDummy2: UBaseType_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_QUEUE__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_QUEUE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xSTATIC_QUEUE__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_QUEUE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_QUEUE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSTATIC_QUEUE__bindgen_ty_1>())).pvDummy2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE__bindgen_ty_1),
            "::",
            stringify!(pvDummy2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSTATIC_QUEUE__bindgen_ty_1>())).uxDummy2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE__bindgen_ty_1),
            "::",
            stringify!(uxDummy2)
        )
    );
}
#[test]
fn bindgen_test_layout_xSTATIC_QUEUE() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_QUEUE>(),
        144usize,
        concat!("Size of: ", stringify!(xSTATIC_QUEUE))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_QUEUE>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_QUEUE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).pvDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(pvDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).xDummy3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).uxDummy4 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(uxDummy4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).ucDummy5 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(ucDummy5)
        )
    );
}
pub type StaticQueue_t = xSTATIC_QUEUE;
pub type StaticSemaphore_t = StaticQueue_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_EVENT_GROUP {
    pub xDummy1: TickType_t,
    pub xDummy2: StaticList_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_EVENT_GROUP() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_EVENT_GROUP>(),
        48usize,
        concat!("Size of: ", stringify!(xSTATIC_EVENT_GROUP))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_EVENT_GROUP>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_EVENT_GROUP))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_EVENT_GROUP>())).xDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(xDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_EVENT_GROUP>())).xDummy2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(xDummy2)
        )
    );
}
pub type StaticEventGroup_t = xSTATIC_EVENT_GROUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TIMER {
    pub pvDummy1: *mut cty::c_void,
    pub xDummy2: StaticListItem_t,
    pub xDummy3: TickType_t,
    pub pvDummy5: *mut cty::c_void,
    pub pvDummy6: TaskFunction_t,
    pub ucDummy8: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_TIMER() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_TIMER>(),
        80usize,
        concat!("Size of: ", stringify!(xSTATIC_TIMER))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_TIMER>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_TIMER))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).pvDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).xDummy2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).xDummy3 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).pvDummy5 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).pvDummy6 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).ucDummy8 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(ucDummy8)
        )
    );
}
pub type StaticTimer_t = xSTATIC_TIMER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_STREAM_BUFFER {
    pub uxDummy1: [size_t; 4usize],
    pub pvDummy2: [*mut cty::c_void; 3usize],
    pub ucDummy3: u8,
    pub uxDummy6: UBaseType_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_STREAM_BUFFER() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_STREAM_BUFFER>(),
        72usize,
        concat!("Size of: ", stringify!(xSTATIC_STREAM_BUFFER))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_STREAM_BUFFER>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_STREAM_BUFFER))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_STREAM_BUFFER>())).uxDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(uxDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_STREAM_BUFFER>())).pvDummy2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(pvDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_STREAM_BUFFER>())).ucDummy3 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(ucDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_STREAM_BUFFER>())).uxDummy6 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(uxDummy6)
        )
    );
}
pub type StaticStreamBuffer_t = xSTATIC_STREAM_BUFFER;
pub type StaticMessageBuffer_t = StaticStreamBuffer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST_ITEM {
    #[doc = "< The value being listed.  In most cases this is used to sort the list in ascending order."]
    pub xItemValue: TickType_t,
    #[doc = "< Pointer to the next ListItem_t in the list."]
    pub pxNext: *mut xLIST_ITEM,
    #[doc = "< Pointer to the previous ListItem_t in the list."]
    pub pxPrevious: *mut xLIST_ITEM,
    #[doc = "< Pointer to the object (normally a TCB) that contains the list item.  There is therefore a two way link between the object containing the list item and the list item itself."]
    pub pvOwner: *mut cty::c_void,
    pub pvContainer: *mut xLIST,
}
#[test]
fn bindgen_test_layout_xLIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xLIST_ITEM>(),
        40usize,
        concat!("Size of: ", stringify!(xLIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xLIST_ITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(xLIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).xItemValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(xItemValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pxNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pxNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pxPrevious as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pxPrevious)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pvOwner as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pvOwner)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pvContainer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pvContainer)
        )
    );
}
pub type ListItem_t = xLIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMINI_LIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
}
#[test]
fn bindgen_test_layout_xMINI_LIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xMINI_LIST_ITEM>(),
        24usize,
        concat!("Size of: ", stringify!(xMINI_LIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xMINI_LIST_ITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(xMINI_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMINI_LIST_ITEM>())).xItemValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xMINI_LIST_ITEM),
            "::",
            stringify!(xItemValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMINI_LIST_ITEM>())).pxNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xMINI_LIST_ITEM),
            "::",
            stringify!(pxNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMINI_LIST_ITEM>())).pxPrevious as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xMINI_LIST_ITEM),
            "::",
            stringify!(pxPrevious)
        )
    );
}
pub type MiniListItem_t = xMINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST {
    pub uxNumberOfItems: UBaseType_t,
    #[doc = "< Used to walk through the list.  Points to the last item returned by a call to listGET_OWNER_OF_NEXT_ENTRY ()."]
    pub pxIndex: *mut ListItem_t,
    #[doc = "< List item that contains the maximum possible item value meaning it is always at the end of the list and is therefore used as a marker."]
    pub xListEnd: MiniListItem_t,
}
#[test]
fn bindgen_test_layout_xLIST() {
    assert_eq!(
        ::core::mem::size_of::<xLIST>(),
        40usize,
        concat!("Size of: ", stringify!(xLIST))
    );
    assert_eq!(
        ::core::mem::align_of::<xLIST>(),
        8usize,
        concat!("Alignment of ", stringify!(xLIST))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST>())).uxNumberOfItems as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST),
            "::",
            stringify!(uxNumberOfItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST>())).pxIndex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST),
            "::",
            stringify!(pxIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST>())).xListEnd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST),
            "::",
            stringify!(xListEnd)
        )
    );
}
pub type List_t = xLIST;
extern "C" {
    pub fn vListInitialise(pxList: *mut List_t);
}
extern "C" {
    pub fn vListInitialiseItem(pxItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsert(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsertEnd(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn uxListRemove(pxItemToRemove: *mut ListItem_t) -> UBaseType_t;
}
#[doc = " task. h"]
#[doc = ""]
#[doc = " Type by which tasks are referenced.  For example, a call to xTaskCreate"]
#[doc = " returns (via a pointer parameter) an TaskHandle_t variable that can then"]
#[doc = " be used as a parameter to vTaskDelete to delete the task."]
#[doc = ""]
#[doc = " \\defgroup TaskHandle_t TaskHandle_t"]
#[doc = " \\ingroup Tasks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tskTaskControlBlock {
    _unused: [u8; 0],
}
pub type TaskHandle_t = *mut tskTaskControlBlock;
pub type ConstTaskHandle_t = *const tskTaskControlBlock;
pub type TaskHookFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg: *mut cty::c_void) -> BaseType_t>;
pub const eTaskState_eRunning: eTaskState = 0;
pub const eTaskState_eReady: eTaskState = 1;
pub const eTaskState_eBlocked: eTaskState = 2;
pub const eTaskState_eSuspended: eTaskState = 3;
pub const eTaskState_eDeleted: eTaskState = 4;
pub const eTaskState_eInvalid: eTaskState = 5;
pub type eTaskState = cty::c_uint;
pub const eNotifyAction_eNoAction: eNotifyAction = 0;
pub const eNotifyAction_eSetBits: eNotifyAction = 1;
pub const eNotifyAction_eIncrement: eNotifyAction = 2;
pub const eNotifyAction_eSetValueWithOverwrite: eNotifyAction = 3;
pub const eNotifyAction_eSetValueWithoutOverwrite: eNotifyAction = 4;
pub type eNotifyAction = cty::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTIME_OUT {
    pub xOverflowCount: BaseType_t,
    pub xTimeOnEntering: TickType_t,
}
#[test]
fn bindgen_test_layout_xTIME_OUT() {
    assert_eq!(
        ::core::mem::size_of::<xTIME_OUT>(),
        16usize,
        concat!("Size of: ", stringify!(xTIME_OUT))
    );
    assert_eq!(
        ::core::mem::align_of::<xTIME_OUT>(),
        8usize,
        concat!("Alignment of ", stringify!(xTIME_OUT))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTIME_OUT>())).xOverflowCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTIME_OUT),
            "::",
            stringify!(xOverflowCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTIME_OUT>())).xTimeOnEntering as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xTIME_OUT),
            "::",
            stringify!(xTimeOnEntering)
        )
    );
}
pub type TimeOut_t = xTIME_OUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMEMORY_REGION {
    pub pvBaseAddress: *mut cty::c_void,
    pub ulLengthInBytes: u32,
    pub ulParameters: u32,
}
#[test]
fn bindgen_test_layout_xMEMORY_REGION() {
    assert_eq!(
        ::core::mem::size_of::<xMEMORY_REGION>(),
        16usize,
        concat!("Size of: ", stringify!(xMEMORY_REGION))
    );
    assert_eq!(
        ::core::mem::align_of::<xMEMORY_REGION>(),
        8usize,
        concat!("Alignment of ", stringify!(xMEMORY_REGION))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMEMORY_REGION>())).pvBaseAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xMEMORY_REGION),
            "::",
            stringify!(pvBaseAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMEMORY_REGION>())).ulLengthInBytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xMEMORY_REGION),
            "::",
            stringify!(ulLengthInBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMEMORY_REGION>())).ulParameters as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xMEMORY_REGION),
            "::",
            stringify!(ulParameters)
        )
    );
}
pub type MemoryRegion_t = xMEMORY_REGION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_PARAMETERS {
    pub pvTaskCode: TaskFunction_t,
    pub pcName: *const cty::c_char,
    pub usStackDepth: StackType_t,
    pub pvParameters: *mut cty::c_void,
    pub uxPriority: UBaseType_t,
    pub puxStackBuffer: *mut StackType_t,
    pub xRegions: [MemoryRegion_t; 1usize],
}
#[test]
fn bindgen_test_layout_xTASK_PARAMETERS() {
    assert_eq!(
        ::core::mem::size_of::<xTASK_PARAMETERS>(),
        64usize,
        concat!("Size of: ", stringify!(xTASK_PARAMETERS))
    );
    assert_eq!(
        ::core::mem::align_of::<xTASK_PARAMETERS>(),
        8usize,
        concat!("Alignment of ", stringify!(xTASK_PARAMETERS))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).pvTaskCode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(pvTaskCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).pcName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(pcName)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).usStackDepth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(usStackDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).pvParameters as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(pvParameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).uxPriority as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(uxPriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xTASK_PARAMETERS>())).puxStackBuffer as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(puxStackBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).xRegions as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(xRegions)
        )
    );
}
pub type TaskParameters_t = xTASK_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_STATUS {
    pub xHandle: TaskHandle_t,
    pub pcTaskName: *const cty::c_char,
    pub xTaskNumber: UBaseType_t,
    pub eCurrentState: eTaskState,
    pub uxCurrentPriority: UBaseType_t,
    pub uxBasePriority: UBaseType_t,
    pub ulRunTimeCounter: u32,
    pub pxStackBase: *mut StackType_t,
    pub usStackHighWaterMark: StackType_t,
}
#[test]
fn bindgen_test_layout_xTASK_STATUS() {
    assert_eq!(
        ::core::mem::size_of::<xTASK_STATUS>(),
        72usize,
        concat!("Size of: ", stringify!(xTASK_STATUS))
    );
    assert_eq!(
        ::core::mem::align_of::<xTASK_STATUS>(),
        8usize,
        concat!("Alignment of ", stringify!(xTASK_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).xHandle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(xHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).pcTaskName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(pcTaskName)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).xTaskNumber as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(xTaskNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).eCurrentState as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(eCurrentState)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).uxCurrentPriority as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(uxCurrentPriority)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).uxBasePriority as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(uxBasePriority)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).ulRunTimeCounter as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(ulRunTimeCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).pxStackBase as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(pxStackBase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xTASK_STATUS>())).usStackHighWaterMark as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(usStackHighWaterMark)
        )
    );
}
pub type TaskStatus_t = xTASK_STATUS;
pub const eSleepModeStatus_eAbortSleep: eSleepModeStatus = 0;
pub const eSleepModeStatus_eStandardSleep: eSleepModeStatus = 1;
pub const eSleepModeStatus_eNoTasksWaitingTimeout: eSleepModeStatus = 2;
pub type eSleepModeStatus = cty::c_uint;
extern "C" {
    pub fn xTaskCreateStatic(
        pxTaskCode: TaskFunction_t,
        pcName: *const cty::c_char,
        uxStackDepth: StackType_t,
        pvParameters: *mut cty::c_void,
        uxPriority: UBaseType_t,
        puxStackBuffer: *mut StackType_t,
        pxTaskBuffer: *mut StaticTask_t,
    ) -> TaskHandle_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskDelete( TaskHandle_t xTaskToDelete );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelete must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Remove a task from the RTOS real time kernel's management.  The task being"]
    #[doc = " deleted will be removed from all ready, blocked, suspended and event lists."]
    #[doc = ""]
    #[doc = " NOTE:  The idle task is responsible for freeing the kernel allocated"]
    #[doc = " memory from tasks that have been deleted.  It is therefore important that"]
    #[doc = " the idle task is not starved of microcontroller processing time if your"]
    #[doc = " application makes any calls to vTaskDelete ().  Memory allocated by the"]
    #[doc = " task code is not automatically freed, and should be freed before the task"]
    #[doc = " is deleted."]
    #[doc = ""]
    #[doc = " See the demo application file death.c for sample code that utilises"]
    #[doc = " vTaskDelete ()."]
    #[doc = ""]
    #[doc = " @param xTaskToDelete The handle of the task to be deleted.  Passing NULL will"]
    #[doc = " cause the calling task to be deleted."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vOtherFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create the task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // Use the handle to delete the task."]
    #[doc = "   vTaskDelete( xHandle );"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup vTaskDelete vTaskDelete"]
    #[doc = " \\ingroup Tasks"]
    pub fn vTaskDelete(xTaskToDelete: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskDelay( const TickType_t xTicksToDelay );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Delay a task for a given number of ticks.  The actual time that the"]
    #[doc = " task remains blocked depends on the tick rate.  The constant"]
    #[doc = " portTICK_PERIOD_MS can be used to calculate real time from the tick"]
    #[doc = " rate - with the resolution of one tick period."]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelay must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " vTaskDelay() specifies a time at which the task wishes to unblock relative to"]
    #[doc = " the time at which vTaskDelay() is called.  For example, specifying a block"]
    #[doc = " period of 100 ticks will cause the task to unblock 100 ticks after"]
    #[doc = " vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method"]
    #[doc = " of controlling the frequency of a periodic task as the path taken through the"]
    #[doc = " code, as well as other task and interrupt activity, will affect the frequency"]
    #[doc = " at which vTaskDelay() gets called and therefore the time at which the task"]
    #[doc = " next executes.  See xTaskDelayUntil() for an alternative API function designed"]
    #[doc = " to facilitate fixed frequency execution.  It does this by specifying an"]
    #[doc = " absolute time (rather than a relative time) at which the calling task should"]
    #[doc = " unblock."]
    #[doc = ""]
    #[doc = " @param xTicksToDelay The amount of time, in tick periods, that"]
    #[doc = " the calling task should block."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " void vTaskFunction( void * pvParameters )"]
    #[doc = " {"]
    #[doc = " // Block for 500ms."]
    #[doc = " const TickType_t xDelay = 500 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Simply toggle the LED every 500ms, blocking between each toggle."]
    #[doc = "       vToggleLED();"]
    #[doc = "       vTaskDelay( xDelay );"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskDelay vTaskDelay"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskDelay(xTicksToDelay: TickType_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskDelayUntil( TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskDelayUntil must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Delay a task until a specified time.  This function can be used by periodic"]
    #[doc = " tasks to ensure a constant execution frequency."]
    #[doc = ""]
    #[doc = " This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will"]
    #[doc = " cause a task to block for the specified number of ticks from the time vTaskDelay () is"]
    #[doc = " called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed"]
    #[doc = " execution frequency as the time between a task starting to execute and that task"]
    #[doc = " calling vTaskDelay () may not be fixed [the task may take a different path though the"]
    #[doc = " code between calls, or may get interrupted or preempted a different number of times"]
    #[doc = " each time it executes]."]
    #[doc = ""]
    #[doc = " Whereas vTaskDelay () specifies a wake time relative to the time at which the function"]
    #[doc = " is called, xTaskDelayUntil () specifies the absolute (exact) time at which it wishes to"]
    #[doc = " unblock."]
    #[doc = ""]
    #[doc = " The macro pdMS_TO_TICKS() can be used to calculate the number of ticks from a"]
    #[doc = " time specified in milliseconds with a resolution of one tick period."]
    #[doc = ""]
    #[doc = " @param pxPreviousWakeTime Pointer to a variable that holds the time at which the"]
    #[doc = " task was last unblocked.  The variable must be initialised with the current time"]
    #[doc = " prior to its first use (see the example below).  Following this the variable is"]
    #[doc = " automatically updated within xTaskDelayUntil ()."]
    #[doc = ""]
    #[doc = " @param xTimeIncrement The cycle time period.  The task will be unblocked at"]
    #[doc = " time *pxPreviousWakeTime + xTimeIncrement.  Calling xTaskDelayUntil with the"]
    #[doc = " same xTimeIncrement parameter value will cause the task to execute with"]
    #[doc = " a fixed interface period."]
    #[doc = ""]
    #[doc = " @return Value which can be used to check whether the task was actually delayed."]
    #[doc = " Will be pdTRUE if the task way delayed and pdFALSE otherwise.  A task will not"]
    #[doc = " be delayed if the next expected wake time is in the past."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " // Perform an action every 10 ticks."]
    #[doc = " void vTaskFunction( void * pvParameters )"]
    #[doc = " {"]
    #[doc = " TickType_t xLastWakeTime;"]
    #[doc = " const TickType_t xFrequency = 10;"]
    #[doc = " BaseType_t xWasDelayed;"]
    #[doc = ""]
    #[doc = "     // Initialise the xLastWakeTime variable with the current time."]
    #[doc = "     xLastWakeTime = xTaskGetTickCount ();"]
    #[doc = "     for( ;; )"]
    #[doc = "     {"]
    #[doc = "         // Wait for the next cycle."]
    #[doc = "         xWasDelayed = xTaskDelayUntil( &xLastWakeTime, xFrequency );"]
    #[doc = ""]
    #[doc = "         // Perform action here. xWasDelayed value can be used to determine"]
    #[doc = "         // whether a deadline was missed if the code here took too long."]
    #[doc = "     }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xTaskDelayUntil xTaskDelayUntil"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskDelayUntil(
        pxPreviousWakeTime: *mut TickType_t,
        xTimeIncrement: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTaskAbortDelay(xTask: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Obtain the priority of any task."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task to be queried.  Passing a NULL"]
    #[doc = " handle results in the priority of the calling task being returned."]
    #[doc = ""]
    #[doc = " @return The priority of xTask."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to obtain the priority of the created task."]
    #[doc = "   // It was created with tskIDLE_PRIORITY, but may have changed"]
    #[doc = "   // it itself."]
    #[doc = "   if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )"]
    #[doc = "   {"]
    #[doc = "       // The task has changed it's priority."]
    #[doc = "   }"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Is our priority higher than the created task?"]
    #[doc = "   if( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) )"]
    #[doc = "   {"]
    #[doc = "       // Our priority (obtained using NULL handle) is higher."]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup uxTaskPriorityGet uxTaskPriorityGet"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn uxTaskPriorityGet(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " A version of uxTaskPriorityGet() that can be used from an ISR."]
    pub fn uxTaskPriorityGetFromISR(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " UBaseType_t uxTaskBasePriorityGet( const TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskPriorityGet and configUSE_MUTEXES must be defined as 1 for this"]
    #[doc = " function to be available. See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Obtain the base priority of any task."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task to be queried.  Passing a NULL"]
    #[doc = " handle results in the base priority of the calling task being returned."]
    #[doc = ""]
    #[doc = " @return The base priority of xTask."]
    #[doc = ""]
    #[doc = " \\defgroup uxTaskPriorityGet uxTaskBasePriorityGet"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn uxTaskBasePriorityGet(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " UBaseType_t uxTaskBasePriorityGetFromISR( const TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " A version of uxTaskBasePriorityGet() that can be used from an ISR."]
    pub fn uxTaskBasePriorityGetFromISR(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn eTaskGetState(xTask: TaskHandle_t) -> eTaskState;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Set the priority of any task."]
    #[doc = ""]
    #[doc = " A context switch will occur before the function returns if the priority"]
    #[doc = " being set is higher than the currently executing task."]
    #[doc = ""]
    #[doc = " @param xTask Handle to the task for which the priority is being set."]
    #[doc = " Passing a NULL handle results in the priority of the calling task being set."]
    #[doc = ""]
    #[doc = " @param uxNewPriority The priority to which the task will be set."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to raise the priority of the created task."]
    #[doc = "   vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use a NULL handle to raise our priority to the same value."]
    #[doc = "   vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup vTaskPrioritySet vTaskPrioritySet"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskPrioritySet(xTask: TaskHandle_t, uxNewPriority: UBaseType_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskSuspend( TaskHandle_t xTaskToSuspend );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskSuspend must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Suspend any task.  When suspended a task will never get any microcontroller"]
    #[doc = " processing time, no matter what its priority."]
    #[doc = ""]
    #[doc = " Calls to vTaskSuspend are not accumulative -"]
    #[doc = " i.e. calling vTaskSuspend () twice on the same task still only requires one"]
    #[doc = " call to vTaskResume () to ready the suspended task."]
    #[doc = ""]
    #[doc = " @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL"]
    #[doc = " handle will cause the calling task to be suspended."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to suspend the created task."]
    #[doc = "   vTaskSuspend( xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // The created task will not run during this period, unless"]
    #[doc = "   // another task calls vTaskResume( xHandle )."]
    #[doc = ""]
    #[doc = "   //..."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "   // Suspend ourselves."]
    #[doc = "   vTaskSuspend( NULL );"]
    #[doc = ""]
    #[doc = "   // We cannot get here unless another task calls vTaskResume"]
    #[doc = "   // with our handle as the parameter."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup vTaskSuspend vTaskSuspend"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskSuspend(xTaskToSuspend: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskResume( TaskHandle_t xTaskToResume );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskSuspend must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Resumes a suspended task."]
    #[doc = ""]
    #[doc = " A task that has been suspended by one or more calls to vTaskSuspend ()"]
    #[doc = " will be made available for running again by a single call to"]
    #[doc = " vTaskResume ()."]
    #[doc = ""]
    #[doc = " @param xTaskToResume Handle to the task being readied."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to suspend the created task."]
    #[doc = "   vTaskSuspend( xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // The created task will not run during this period, unless"]
    #[doc = "   // another task calls vTaskResume( xHandle )."]
    #[doc = ""]
    #[doc = "   //..."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "   // Resume the suspended task ourselves."]
    #[doc = "   vTaskResume( xHandle );"]
    #[doc = ""]
    #[doc = "   // The created task will once again get microcontroller processing"]
    #[doc = "   // time in accordance with its priority within the system."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup vTaskResume vTaskResume"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskResume(xTaskToResume: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void xTaskResumeFromISR( TaskHandle_t xTaskToResume );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be"]
    #[doc = " available.  See the configuration section for more information."]
    #[doc = ""]
    #[doc = " An implementation of vTaskResume() that can be called from within an ISR."]
    #[doc = ""]
    #[doc = " A task that has been suspended by one or more calls to vTaskSuspend ()"]
    #[doc = " will be made available for running again by a single call to"]
    #[doc = " xTaskResumeFromISR ()."]
    #[doc = ""]
    #[doc = " xTaskResumeFromISR() should not be used to synchronise a task with an"]
    #[doc = " interrupt if there is a chance that the interrupt could arrive prior to the"]
    #[doc = " task being suspended - as this can lead to interrupts being missed. Use of a"]
    #[doc = " semaphore as a synchronisation mechanism would avoid this eventuality."]
    #[doc = ""]
    #[doc = " @param xTaskToResume Handle to the task being readied."]
    #[doc = ""]
    #[doc = " @return pdTRUE if resuming the task should result in a context switch,"]
    #[doc = " otherwise pdFALSE. This is used by the ISR to determine if a context switch"]
    #[doc = " may be required following the ISR."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskResumeFromISR vTaskResumeFromISR"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskResumeFromISR(xTaskToResume: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskStartScheduler( void );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Starts the real time kernel tick processing.  After calling the kernel"]
    #[doc = " has control over which tasks are executed and when."]
    #[doc = ""]
    #[doc = " See the demo application file main.c for an example of creating"]
    #[doc = " tasks and starting the kernel."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = "   // Create at least one task before starting the kernel."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );"]
    #[doc = ""]
    #[doc = "   // Start the real time kernel with preemption."]
    #[doc = "   vTaskStartScheduler ();"]
    #[doc = ""]
    #[doc = "   // Will not get here unless a task calls vTaskEndScheduler ()"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskStartScheduler vTaskStartScheduler"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskStartScheduler();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskEndScheduler( void );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " NOTE:  At the time of writing only the x86 real mode port, which runs on a PC"]
    #[doc = " in place of DOS, implements this function."]
    #[doc = ""]
    #[doc = " Stops the real time kernel tick.  All created tasks will be automatically"]
    #[doc = " deleted and multitasking (either preemptive or cooperative) will"]
    #[doc = " stop.  Execution then resumes from the point where vTaskStartScheduler ()"]
    #[doc = " was called, as if vTaskStartScheduler () had just returned."]
    #[doc = ""]
    #[doc = " See the demo application file main. c in the demo/PC directory for an"]
    #[doc = " example that uses vTaskEndScheduler ()."]
    #[doc = ""]
    #[doc = " vTaskEndScheduler () requires an exit function to be defined within the"]
    #[doc = " portable layer (see vPortEndScheduler () in port. c for the PC port).  This"]
    #[doc = " performs hardware specific operations such as stopping the kernel tick."]
    #[doc = ""]
    #[doc = " vTaskEndScheduler () will cause all of the resources allocated by the"]
    #[doc = " kernel to be freed - but will not free resources allocated by application"]
    #[doc = " tasks."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskCode( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // At some point we want to end the real time kernel processing"]
    #[doc = "       // so call ..."]
    #[doc = "       vTaskEndScheduler ();"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = "   // Create at least one task before starting the kernel."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );"]
    #[doc = ""]
    #[doc = "   // Start the real time kernel with preemption."]
    #[doc = "   vTaskStartScheduler ();"]
    #[doc = ""]
    #[doc = "   // Will only get here when the vTaskCode () task has called"]
    #[doc = "   // vTaskEndScheduler ().  When we get here we are back to single task"]
    #[doc = "   // execution."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskEndScheduler vTaskEndScheduler"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskEndScheduler();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskSuspendAll( void );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Suspends the scheduler without disabling interrupts.  Context switches will"]
    #[doc = " not occur while the scheduler is suspended."]
    #[doc = ""]
    #[doc = " After calling vTaskSuspendAll () the calling task will continue to execute"]
    #[doc = " without risk of being swapped out until a call to xTaskResumeAll () has been"]
    #[doc = " made."]
    #[doc = ""]
    #[doc = " API functions that have the potential to cause a context switch (for example,"]
    #[doc = " xTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler"]
    #[doc = " is suspended."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vTask1( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // At some point the task wants to perform a long operation during"]
    #[doc = "       // which it does not want to get swapped out.  It cannot use"]
    #[doc = "       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the"]
    #[doc = "       // operation may cause interrupts to be missed - including the"]
    #[doc = "       // ticks."]
    #[doc = ""]
    #[doc = "       // Prevent the real time kernel swapping out the task."]
    #[doc = "       vTaskSuspendAll ();"]
    #[doc = ""]
    #[doc = "       // Perform the operation here.  There is no need to use critical"]
    #[doc = "       // sections as we have all the microcontroller processing time."]
    #[doc = "       // During this time interrupts will still operate and the kernel"]
    #[doc = "       // tick count will be maintained."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // The operation is complete.  Restart the kernel."]
    #[doc = "       xTaskResumeAll ();"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup vTaskSuspendAll vTaskSuspendAll"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskSuspendAll();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskResumeAll( void );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Resumes scheduler activity after it was suspended by a call to"]
    #[doc = " vTaskSuspendAll()."]
    #[doc = ""]
    #[doc = " xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks"]
    #[doc = " that were previously suspended by a call to vTaskSuspend()."]
    #[doc = ""]
    #[doc = " @return If resuming the scheduler caused a context switch then pdTRUE is"]
    #[doc = "         returned, otherwise pdFALSE is returned."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vTask1( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // At some point the task wants to perform a long operation during"]
    #[doc = "       // which it does not want to get swapped out.  It cannot use"]
    #[doc = "       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the"]
    #[doc = "       // operation may cause interrupts to be missed - including the"]
    #[doc = "       // ticks."]
    #[doc = ""]
    #[doc = "       // Prevent the real time kernel swapping out the task."]
    #[doc = "       vTaskSuspendAll ();"]
    #[doc = ""]
    #[doc = "       // Perform the operation here.  There is no need to use critical"]
    #[doc = "       // sections as we have all the microcontroller processing time."]
    #[doc = "       // During this time interrupts will still operate and the real"]
    #[doc = "       // time kernel tick count will be maintained."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // The operation is complete.  Restart the kernel.  We want to force"]
    #[doc = "       // a context switch - but there is no point if resuming the scheduler"]
    #[doc = "       // caused a context switch already."]
    #[doc = "       if( !xTaskResumeAll () )"]
    #[doc = "       {"]
    #[doc = "            taskYIELD ();"]
    #[doc = "       }"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xTaskResumeAll xTaskResumeAll"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn xTaskResumeAll() -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " TickType_t xTaskGetTickCount( void );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @return The count of ticks since vTaskStartScheduler was called."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskGetTickCount xTaskGetTickCount"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetTickCount() -> TickType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " TickType_t xTaskGetTickCountFromISR( void );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @return The count of ticks since vTaskStartScheduler was called."]
    #[doc = ""]
    #[doc = " This is a version of xTaskGetTickCount() that is safe to be called from an"]
    #[doc = " ISR - provided that TickType_t is the natural word size of the"]
    #[doc = " microcontroller being used or interrupt nesting is either not supported or"]
    #[doc = " not being used."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskGetTickCountFromISR xTaskGetTickCountFromISR"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetTickCountFromISR() -> TickType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " uint16_t uxTaskGetNumberOfTasks( void );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @return The number of tasks that the real time kernel is currently managing."]
    #[doc = " This includes all ready, blocked and suspended tasks.  A task that"]
    #[doc = " has been deleted but not yet freed by the idle task will also be"]
    #[doc = " included in the count."]
    #[doc = ""]
    #[doc = " \\defgroup uxTaskGetNumberOfTasks uxTaskGetNumberOfTasks"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn uxTaskGetNumberOfTasks() -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " char *pcTaskGetName( TaskHandle_t xTaskToQuery );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @return The text (human readable) name of the task referenced by the handle"]
    #[doc = " xTaskToQuery.  A task can query its own name by either passing in its own"]
    #[doc = " handle, or by setting xTaskToQuery to NULL."]
    #[doc = ""]
    #[doc = " \\defgroup pcTaskGetName pcTaskGetName"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn pcTaskGetName(xTaskToQuery: TaskHandle_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn xTaskGetHandle(pcNameToQuery: *const cty::c_char) -> TaskHandle_t;
}
extern "C" {
    pub fn xTaskGetStaticBuffers(
        xTask: TaskHandle_t,
        ppuxStackBuffer: *mut *mut StackType_t,
        ppxTaskBuffer: *mut *mut StaticTask_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn uxTaskGetStackHighWaterMark(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn uxTaskGetStackHighWaterMark2(xTask: TaskHandle_t) -> StackType_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " This function is used to provide a statically allocated block of memory to FreeRTOS to hold the Idle Task TCB.  This function is required when"]
    #[doc = " configSUPPORT_STATIC_ALLOCATION is set.  For more information see this URI: https://www.FreeRTOS.org/a00110.html#configSUPPORT_STATIC_ALLOCATION"]
    #[doc = ""]
    #[doc = " @param ppxIdleTaskTCBBuffer A handle to a statically allocated TCB buffer"]
    #[doc = " @param ppxIdleTaskStackBuffer A handle to a statically allocated Stack buffer for the idle task"]
    #[doc = " @param puxIdleTaskStackSize A pointer to the number of elements that will fit in the allocated stack buffer"]
    pub fn vApplicationGetIdleTaskMemory(
        ppxIdleTaskTCBBuffer: *mut *mut StaticTask_t,
        ppxIdleTaskStackBuffer: *mut *mut StackType_t,
        puxIdleTaskStackSize: *mut StackType_t,
    );
}
extern "C" {
    pub fn xTaskGetIdleTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn xTaskGetIdleTaskHandleForCore(xCoreID: BaseType_t) -> TaskHandle_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskNotifyIndexed( TaskHandle_t xTaskToNotify, UBaseType_t uxIndexToNotify, uint32_t ulValue, eNotifyAction eAction );"]
    #[doc = " BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Sends a direct to task notification to a task, with an optional value and"]
    #[doc = " action."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() to"]
    #[doc = " [optionally] block to wait for a notification to be pending.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotify() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling xTaskNotify() is equivalent to calling xTaskNotifyIndexed()"]
    #[doc = " with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotify() does"]
    #[doc = " not have this parameter and always sends notifications to index 0."]
    #[doc = ""]
    #[doc = " @param ulValue Data that can be sent with the notification.  How the data is"]
    #[doc = " used depends on the value of the eAction parameter."]
    #[doc = ""]
    #[doc = " @param eAction Specifies how the notification updates the task's notification"]
    #[doc = " value, if at all.  Valid values for eAction are as follows:"]
    #[doc = ""]
    #[doc = " eSetBits -"]
    #[doc = " The target notification value is bitwise ORed with ulValue."]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eIncrement -"]
    #[doc = " The target notification value is incremented.  ulValue is not used and"]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithOverwrite -"]
    #[doc = " The target notification value is set to the value of ulValue, even if the"]
    #[doc = " task being notified had not yet processed the previous notification at the"]
    #[doc = " same array index (the task already had a notification pending at that index)."]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithoutOverwrite -"]
    #[doc = " If the task being notified did not already have a notification pending at the"]
    #[doc = " same array index then the target notification value is set to ulValue and"]
    #[doc = " xTaskNotifyIndexed() will return pdPASS.  If the task being notified already"]
    #[doc = " had a notification pending at the same array index then no action is"]
    #[doc = " performed and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " eNoAction -"]
    #[doc = " The task receives a notification at the specified array index without the"]
    #[doc = " notification value at that index being updated.  ulValue is not used and"]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " pulPreviousNotificationValue -"]
    #[doc = " Can be used to pass out the subject task's notification value before any"]
    #[doc = " bits are modified by the notify function."]
    #[doc = ""]
    #[doc = " @return Dependent on the value of eAction.  See the description of the"]
    #[doc = " eAction parameter."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyIndexed xTaskNotifyIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotify(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskNotifyIndexedFromISR( TaskHandle_t xTaskToNotify, UBaseType_t uxIndexToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = " BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " A version of xTaskNotifyIndexed() that can be used from an interrupt service"]
    #[doc = " routine (ISR)."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTakeIndexed() to [optionally] block"]
    #[doc = " to wait for a notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyFromISR() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyFromISR() is equivalent to calling"]
    #[doc = " xTaskNotifyIndexedFromISR() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyFromISR()"]
    #[doc = " does not have this parameter and always sends notifications to index 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param ulValue Data that can be sent with the notification.  How the data is"]
    #[doc = " used depends on the value of the eAction parameter."]
    #[doc = ""]
    #[doc = " @param eAction Specifies how the notification updates the task's notification"]
    #[doc = " value, if at all.  Valid values for eAction are as follows:"]
    #[doc = ""]
    #[doc = " eSetBits -"]
    #[doc = " The task's notification value is bitwise ORed with ulValue.  xTaskNotify()"]
    #[doc = " always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eIncrement -"]
    #[doc = " The task's notification value is incremented.  ulValue is not used and"]
    #[doc = " xTaskNotify() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithOverwrite -"]
    #[doc = " The task's notification value is set to the value of ulValue, even if the"]
    #[doc = " task being notified had not yet processed the previous notification (the"]
    #[doc = " task already had a notification pending).  xTaskNotify() always returns"]
    #[doc = " pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithoutOverwrite -"]
    #[doc = " If the task being notified did not already have a notification pending then"]
    #[doc = " the task's notification value is set to ulValue and xTaskNotify() will"]
    #[doc = " return pdPASS.  If the task being notified already had a notification"]
    #[doc = " pending then no action is performed and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " eNoAction -"]
    #[doc = " The task receives a notification without its notification value being"]
    #[doc = " updated.  ulValue is not used and xTaskNotify() always returns pdPASS in"]
    #[doc = " this case."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the"]
    #[doc = " task to which the notification was sent to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently running task.  If"]
    #[doc = " xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should"]
    #[doc = " be requested before the interrupt is exited.  How a context switch is"]
    #[doc = " requested from an ISR is dependent on the port - see the documentation page"]
    #[doc = " for the port in use."]
    #[doc = ""]
    #[doc = " @return Dependent on the value of eAction.  See the description of the"]
    #[doc = " eAction parameter."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyIndexedFromISR xTaskNotifyIndexedFromISR"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyFromISR(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskNotifyWaitIndexed( UBaseType_t uxIndexToWaitOn, uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = " BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Waits for a direct to task notification to be pending at a given index within"]
    #[doc = " an array of direct to task notifications."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTakeIndexed() to [optionally] block"]
    #[doc = " to wait for a notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyWait() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling xTaskNotifyWait() is equivalent to calling"]
    #[doc = " xTaskNotifyWaitIndexed() with the uxIndexToWaitOn parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToWaitOn The index within the calling task's array of"]
    #[doc = " notification values on which the calling task will wait for a notification to"]
    #[doc = " be received.  uxIndexToWaitOn must be less than"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyWait() does"]
    #[doc = " not have this parameter and always waits for notifications on index 0."]
    #[doc = ""]
    #[doc = " @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value"]
    #[doc = " will be cleared in the calling task's notification value before the task"]
    #[doc = " checks to see if any notifications are pending, and optionally blocks if no"]
    #[doc = " notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if"]
    #[doc = " limits.h is included) or 0xffffffffUL (if limits.h is not included) will have"]
    #[doc = " the effect of resetting the task's notification value to 0.  Setting"]
    #[doc = " ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged."]
    #[doc = ""]
    #[doc = " @param ulBitsToClearOnExit If a notification is pending or received before"]
    #[doc = " the calling task exits the xTaskNotifyWait() function then the task's"]
    #[doc = " notification value (see the xTaskNotify() API function) is passed out using"]
    #[doc = " the pulNotificationValue parameter.  Then any bits that are set in"]
    #[doc = " ulBitsToClearOnExit will be cleared in the task's notification value (note"]
    #[doc = " *pulNotificationValue is set before any bits are cleared).  Setting"]
    #[doc = " ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL"]
    #[doc = " (if limits.h is not included) will have the effect of resetting the task's"]
    #[doc = " notification value to 0 before the function exits.  Setting"]
    #[doc = " ulBitsToClearOnExit to 0 will leave the task's notification value unchanged"]
    #[doc = " when the function exits (in which case the value passed out in"]
    #[doc = " pulNotificationValue will match the task's notification value)."]
    #[doc = ""]
    #[doc = " @param pulNotificationValue Used to pass the task's notification value out"]
    #[doc = " of the function.  Note the value passed out will not be effected by the"]
    #[doc = " clearing of any bits caused by ulBitsToClearOnExit being non-zero."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time that the task should wait in"]
    #[doc = " the Blocked state for a notification to be received, should a notification"]
    #[doc = " not already be pending when xTaskNotifyWait() was called.  The task"]
    #[doc = " will not consume any processing time while it is in the Blocked state.  This"]
    #[doc = " is specified in kernel ticks, the macro pdMS_TO_TICKS( value_in_ms ) can be"]
    #[doc = " used to convert a time specified in milliseconds to a time specified in"]
    #[doc = " ticks."]
    #[doc = ""]
    #[doc = " @return If a notification was received (including notifications that were"]
    #[doc = " already pending when xTaskNotifyWait was called) then pdPASS is"]
    #[doc = " returned.  Otherwise pdFAIL is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyWaitIndexed xTaskNotifyWaitIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyWait(
        uxIndexToWaitOn: UBaseType_t,
        ulBitsToClearOnEntry: u32,
        ulBitsToClearOnExit: u32,
        pulNotificationValue: *mut u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskNotifyGiveIndexedFromISR( TaskHandle_t xTaskHandle, UBaseType_t uxIndexToNotify, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = " void vTaskNotifyGiveFromISR( TaskHandle_t xTaskHandle, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " A version of xTaskNotifyGiveIndexed() that can be called from an interrupt"]
    #[doc = " service routine (ISR)."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for more details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro"]
    #[doc = " to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " vTaskNotifyGiveIndexedFromISR() is intended for use when task notifications"]
    #[doc = " are used as light weight and faster binary or counting semaphore equivalents."]
    #[doc = " Actual FreeRTOS semaphores are given from an ISR using the"]
    #[doc = " xSemaphoreGiveFromISR() API function, the equivalent action that instead uses"]
    #[doc = " a task notification is vTaskNotifyGiveIndexedFromISR()."]
    #[doc = ""]
    #[doc = " When task notifications are being used as a binary or counting semaphore"]
    #[doc = " equivalent then the task being notified should wait for the notification"]
    #[doc = " using the ulTaskNotifyTakeIndexed() API function rather than the"]
    #[doc = " xTaskNotifyWaitIndexed() API function."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyFromISR() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyGiveFromISR() is equivalent to calling"]
    #[doc = " xTaskNotifyGiveIndexedFromISR() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " xTaskNotifyGiveFromISR() does not have this parameter and always sends"]
    #[doc = " notifications to index 0."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the"]
    #[doc = " task to which the notification was sent to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently running task.  If"]
    #[doc = " vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch"]
    #[doc = " should be requested before the interrupt is exited.  How a context switch is"]
    #[doc = " requested from an ISR is dependent on the port - see the documentation page"]
    #[doc = " for the port in use."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskNotifyGiveIndexedFromISR vTaskNotifyGiveIndexedFromISR"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn vTaskGenericNotifyGiveFromISR(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    );
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " uint32_t ulTaskNotifyTakeIndexed( UBaseType_t uxIndexToWaitOn, BaseType_t xClearCountOnExit, TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = " uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Waits for a direct to task notification on a particular index in the calling"]
    #[doc = " task's notification array in a manner similar to taking a counting semaphore."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " ulTaskNotifyTakeIndexed() is intended for use when a task notification is"]
    #[doc = " used as a faster and lighter weight binary or counting semaphore alternative."]
    #[doc = " Actual FreeRTOS semaphores are taken using the xSemaphoreTake() API function,"]
    #[doc = " the equivalent action that instead uses a task notification is"]
    #[doc = " ulTaskNotifyTakeIndexed()."]
    #[doc = ""]
    #[doc = " When a task is using its notification value as a binary or counting semaphore"]
    #[doc = " other tasks should send notifications to it using the xTaskNotifyGiveIndexed()"]
    #[doc = " macro, or xTaskNotifyIndex() function with the eAction parameter set to"]
    #[doc = " eIncrement."]
    #[doc = ""]
    #[doc = " ulTaskNotifyTakeIndexed() can either clear the task's notification value at"]
    #[doc = " the array index specified by the uxIndexToWaitOn parameter to zero on exit,"]
    #[doc = " in which case the notification value acts like a binary semaphore, or"]
    #[doc = " decrement the notification value on exit, in which case the notification"]
    #[doc = " value acts like a counting semaphore."]
    #[doc = ""]
    #[doc = " A task can use ulTaskNotifyTakeIndexed() to [optionally] block to wait for"]
    #[doc = " a notification.  The task does not consume any CPU time while it is in the"]
    #[doc = " Blocked state."]
    #[doc = ""]
    #[doc = " Where as xTaskNotifyWaitIndexed() will return when a notification is pending,"]
    #[doc = " ulTaskNotifyTakeIndexed() will return when the task's notification value is"]
    #[doc = " not zero."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  ulTaskNotifyTake() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling ulTaskNotifyTake() is equivalent to calling"]
    #[doc = " ulTaskNotifyTakeIndexed() with the uxIndexToWaitOn parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToWaitOn The index within the calling task's array of"]
    #[doc = " notification values on which the calling task will wait for a notification to"]
    #[doc = " be non-zero.  uxIndexToWaitOn must be less than"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyTake() does"]
    #[doc = " not have this parameter and always waits for notifications on index 0."]
    #[doc = ""]
    #[doc = " @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's"]
    #[doc = " notification value is decremented when the function exits.  In this way the"]
    #[doc = " notification value acts like a counting semaphore.  If xClearCountOnExit is"]
    #[doc = " not pdFALSE then the task's notification value is cleared to zero when the"]
    #[doc = " function exits.  In this way the notification value acts like a binary"]
    #[doc = " semaphore."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time that the task should wait in"]
    #[doc = " the Blocked state for the task's notification value to be greater than zero,"]
    #[doc = " should the count not already be greater than zero when"]
    #[doc = " ulTaskNotifyTake() was called.  The task will not consume any processing"]
    #[doc = " time while it is in the Blocked state.  This is specified in kernel ticks,"]
    #[doc = " the macro pdMS_TO_TICKS( value_in_ms ) can be used to convert a time"]
    #[doc = " specified in milliseconds to a time specified in ticks."]
    #[doc = ""]
    #[doc = " @return The task's notification count before it is either cleared to zero or"]
    #[doc = " decremented (see the xClearCountOnExit parameter)."]
    #[doc = ""]
    #[doc = " \\defgroup ulTaskNotifyTakeIndexed ulTaskNotifyTakeIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn ulTaskGenericNotifyTake(
        uxIndexToWaitOn: UBaseType_t,
        xClearCountOnExit: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> u32;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskNotifyStateClearIndexed( TaskHandle_t xTask, UBaseType_t uxIndexToCLear );"]
    #[doc = ""]
    #[doc = " BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " If a notification is sent to an index within the array of notifications then"]
    #[doc = " the notification at that index is said to be 'pending' until it is read or"]
    #[doc = " explicitly cleared by the receiving task.  xTaskNotifyStateClearIndexed()"]
    #[doc = " is the function that clears a pending notification without reading the"]
    #[doc = " notification value.  The notification value at the same array index is not"]
    #[doc = " altered.  Set xTask to NULL to clear the notification state of the calling"]
    #[doc = " task."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyStateClear() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyStateClear() is equivalent to calling"]
    #[doc = " xTaskNotifyStateClearIndexed() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the RTOS task that will have a notification state"]
    #[doc = " cleared.  Set xTask to NULL to clear a notification state in the calling"]
    #[doc = " task.  To obtain a task's handle create the task using xTaskCreate() and"]
    #[doc = " make use of the pxCreatedTask parameter, or create the task using"]
    #[doc = " xTaskCreateStatic() and store the returned value, or use the task's name in"]
    #[doc = " a call to xTaskGetHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToClear The index within the target task's array of"]
    #[doc = " notification values to act upon.  For example, setting uxIndexToClear to 1"]
    #[doc = " will clear the state of the notification at index 1 within the array."]
    #[doc = " uxIndexToClear must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " ulTaskNotifyStateClear() does not have this parameter and always acts on the"]
    #[doc = " notification at index 0."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the task's notification state was set to"]
    #[doc = " eNotWaitingNotification, otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyStateClearIndexed xTaskNotifyStateClearIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyStateClear(
        xTask: TaskHandle_t,
        uxIndexToClear: UBaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " uint32_t ulTaskNotifyValueClearIndexed( TaskHandle_t xTask, UBaseType_t uxIndexToClear, uint32_t ulBitsToClear );"]
    #[doc = ""]
    #[doc = " uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " ulTaskNotifyValueClearIndexed() clears the bits specified by the"]
    #[doc = " ulBitsToClear bit mask in the notification value at array index uxIndexToClear"]
    #[doc = " of the task referenced by xTask."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  ulTaskNotifyValueClear() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling ulTaskNotifyValueClear() is equivalent to calling"]
    #[doc = " ulTaskNotifyValueClearIndexed() with the uxIndexToClear parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the RTOS task that will have bits in one of its"]
    #[doc = " notification values cleared. Set xTask to NULL to clear bits in a"]
    #[doc = " notification value of the calling task.  To obtain a task's handle create the"]
    #[doc = " task using xTaskCreate() and make use of the pxCreatedTask parameter, or"]
    #[doc = " create the task using xTaskCreateStatic() and store the returned value, or"]
    #[doc = " use the task's name in a call to xTaskGetHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToClear The index within the target task's array of"]
    #[doc = " notification values in which to clear the bits.  uxIndexToClear"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " ulTaskNotifyValueClear() does not have this parameter and always clears bits"]
    #[doc = " in the notification value at index 0."]
    #[doc = ""]
    #[doc = " @param ulBitsToClear Bit mask of the bits to clear in the notification value of"]
    #[doc = " xTask. Set a bit to 1 to clear the corresponding bits in the task's notification"]
    #[doc = " value. Set ulBitsToClear to 0xffffffff (UINT_MAX on 32-bit architectures) to clear"]
    #[doc = " the notification value to 0.  Set ulBitsToClear to 0 to query the task's"]
    #[doc = " notification value without clearing any bits."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return The value of the target task's notification value before the bits"]
    #[doc = " specified by ulBitsToClear were cleared."]
    #[doc = " \\defgroup ulTaskNotifyValueClear ulTaskNotifyValueClear"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn ulTaskGenericNotifyValueClear(
        xTask: TaskHandle_t,
        uxIndexToClear: UBaseType_t,
        ulBitsToClear: u32,
    ) -> u32;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Capture the current time for future use with xTaskCheckForTimeOut()."]
    #[doc = ""]
    #[doc = " @param pxTimeOut Pointer to a timeout object into which the current time"]
    #[doc = " is to be captured.  The captured time includes the tick count and the number"]
    #[doc = " of times the tick count has overflowed since the system first booted."]
    #[doc = " \\defgroup vTaskSetTimeOutState vTaskSetTimeOutState"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Determines if pxTicksToWait ticks has passed since a time was captured"]
    #[doc = " using a call to vTaskSetTimeOutState().  The captured time includes the tick"]
    #[doc = " count and the number of times the tick count has overflowed."]
    #[doc = ""]
    #[doc = " @param pxTimeOut The time status as captured previously using"]
    #[doc = " vTaskSetTimeOutState. If the timeout has not yet occurred, it is updated"]
    #[doc = " to reflect the current time status."]
    #[doc = " @param pxTicksToWait The number of ticks to check for timeout i.e. if"]
    #[doc = " pxTicksToWait ticks have passed since pxTimeOut was last updated (either by"]
    #[doc = " vTaskSetTimeOutState() or xTaskCheckForTimeOut()), the timeout has occurred."]
    #[doc = " If the timeout has not occurred, pxTicksToWait is updated to reflect the"]
    #[doc = " number of remaining ticks."]
    #[doc = ""]
    #[doc = " @return If timeout has occurred, pdTRUE is returned. Otherwise pdFALSE is"]
    #[doc = " returned and pxTicksToWait is updated to reflect the number of remaining"]
    #[doc = " ticks."]
    #[doc = ""]
    #[doc = " @see https://www.FreeRTOS.org/xTaskCheckForTimeOut.html"]
    #[doc = ""]
    #[doc = " Example Usage:"]
    #[doc = " @code{c}"]
    #[doc = "  // Driver library function used to receive uxWantedBytes from an Rx buffer"]
    #[doc = "  // that is filled by a UART interrupt. If there are not enough bytes in the"]
    #[doc = "  // Rx buffer then the task enters the Blocked state until it is notified that"]
    #[doc = "  // more data has been placed into the buffer. If there is still not enough"]
    #[doc = "  // data then the task re-enters the Blocked state, and xTaskCheckForTimeOut()"]
    #[doc = "  // is used to re-calculate the Block time to ensure the total amount of time"]
    #[doc = "  // spent in the Blocked state does not exceed MAX_TIME_TO_WAIT. This"]
    #[doc = "  // continues until either the buffer contains at least uxWantedBytes bytes,"]
    #[doc = "  // or the total amount of time spent in the Blocked state reaches"]
    #[doc = "  // MAX_TIME_TO_WAIT - at which point the task reads however many bytes are"]
    #[doc = "  // available up to a maximum of uxWantedBytes."]
    #[doc = ""]
    #[doc = "  size_t xUART_Receive( uint8_t *pucBuffer, size_t uxWantedBytes )"]
    #[doc = "  {"]
    #[doc = "  size_t uxReceived = 0;"]
    #[doc = "  TickType_t xTicksToWait = MAX_TIME_TO_WAIT;"]
    #[doc = "  TimeOut_t xTimeOut;"]
    #[doc = ""]
    #[doc = "      // Initialize xTimeOut.  This records the time at which this function"]
    #[doc = "      // was entered."]
    #[doc = "      vTaskSetTimeOutState( &xTimeOut );"]
    #[doc = ""]
    #[doc = "      // Loop until the buffer contains the wanted number of bytes, or a"]
    #[doc = "      // timeout occurs."]
    #[doc = "      while( UART_bytes_in_rx_buffer( pxUARTInstance ) < uxWantedBytes )"]
    #[doc = "      {"]
    #[doc = "          // The buffer didn't contain enough data so this task is going to"]
    #[doc = "          // enter the Blocked state. Adjusting xTicksToWait to account for"]
    #[doc = "          // any time that has been spent in the Blocked state within this"]
    #[doc = "          // function so far to ensure the total amount of time spent in the"]
    #[doc = "          // Blocked state does not exceed MAX_TIME_TO_WAIT."]
    #[doc = "          if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) != pdFALSE )"]
    #[doc = "          {"]
    #[doc = "              //Timed out before the wanted number of bytes were available,"]
    #[doc = "              // exit the loop."]
    #[doc = "              break;"]
    #[doc = "          }"]
    #[doc = ""]
    #[doc = "          // Wait for a maximum of xTicksToWait ticks to be notified that the"]
    #[doc = "          // receive interrupt has placed more data into the buffer."]
    #[doc = "          ulTaskNotifyTake( pdTRUE, xTicksToWait );"]
    #[doc = "      }"]
    #[doc = ""]
    #[doc = "      // Attempt to read uxWantedBytes from the receive buffer into pucBuffer."]
    #[doc = "      // The actual number of bytes read (which might be less than"]
    #[doc = "      // uxWantedBytes) is returned."]
    #[doc = "      uxReceived = UART_read_from_receive_buffer( pxUARTInstance,"]
    #[doc = "                                                  pucBuffer,"]
    #[doc = "                                                  uxWantedBytes );"]
    #[doc = ""]
    #[doc = "      return uxReceived;"]
    #[doc = "  }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xTaskCheckForTimeOut xTaskCheckForTimeOut"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskCheckForTimeOut(
        pxTimeOut: *mut TimeOut_t,
        pxTicksToWait: *mut TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " This function corrects the tick count value after the application code has held"]
    #[doc = " interrupts disabled for an extended period resulting in tick interrupts having"]
    #[doc = " been missed."]
    #[doc = ""]
    #[doc = " This function is similar to vTaskStepTick(), however, unlike"]
    #[doc = " vTaskStepTick(), xTaskCatchUpTicks() may move the tick count forward past a"]
    #[doc = " time at which a task should be removed from the blocked state.  That means"]
    #[doc = " tasks may have to be removed from the blocked state as the tick count is"]
    #[doc = " moved."]
    #[doc = ""]
    #[doc = " @param xTicksToCatchUp The number of tick interrupts that have been missed due to"]
    #[doc = " interrupts being disabled.  Its value is not computed automatically, so must be"]
    #[doc = " computed by the application writer."]
    #[doc = ""]
    #[doc = " @return pdTRUE if moving the tick count forward resulted in a task leaving the"]
    #[doc = " blocked state and a context switch being performed.  Otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskCatchUpTicks xTaskCatchUpTicks"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskCatchUpTicks(xTicksToCatchUp: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskIncrementTick() -> BaseType_t;
}
extern "C" {
    pub fn vTaskPlaceOnEventList(pxEventList: *mut List_t, xTicksToWait: TickType_t);
}
extern "C" {
    pub fn vTaskPlaceOnUnorderedEventList(
        pxEventList: *mut List_t,
        xItemValue: TickType_t,
        xTicksToWait: TickType_t,
    );
}
extern "C" {
    pub fn vTaskPlaceOnEventListRestricted(
        pxEventList: *mut List_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xTaskRemoveFromEventList(pxEventList: *const List_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskRemoveFromUnorderedEventList(
        pxEventListItem: *mut ListItem_t,
        xItemValue: TickType_t,
    );
}
extern "C" {
    pub fn vTaskSwitchContext();
}
extern "C" {
    pub fn uxTaskResetEventItemValue() -> TickType_t;
}
extern "C" {
    pub fn xTaskGetCurrentTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn xTaskGetCurrentTaskHandleForCore(xCoreID: BaseType_t) -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskMissedYield();
}
extern "C" {
    pub fn xTaskGetSchedulerState() -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityInherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityDisinherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskPriorityDisinheritAfterTimeout(
        pxMutexHolder: TaskHandle_t,
        uxHighestPriorityWaitingTask: UBaseType_t,
    );
}
extern "C" {
    pub fn pvTaskIncrementMutexHeldCount() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskInternalSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
#[doc = " Type by which software timers are referenced.  For example, a call to"]
#[doc = " xTimerCreate() returns an TimerHandle_t variable that can then be used to"]
#[doc = " reference the subject timer in calls to other software timer API functions"]
#[doc = " (for example, xTimerStart(), xTimerReset(), etc.)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmrTimerControl {
    _unused: [u8; 0],
}
pub type TimerHandle_t = *mut tmrTimerControl;
pub type TimerCallbackFunction_t =
    ::core::option::Option<unsafe extern "C" fn(xTimer: TimerHandle_t)>;
pub type PendedFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void, arg2: u32)>;
extern "C" {
    pub fn xTimerCreateStatic(
        pcTimerName: *const cty::c_char,
        xTimerPeriodInTicks: TickType_t,
        xAutoReload: BaseType_t,
        pvTimerID: *mut cty::c_void,
        pxCallbackFunction: TimerCallbackFunction_t,
        pxTimerBuffer: *mut StaticTimer_t,
    ) -> TimerHandle_t;
}
extern "C" {
    #[doc = " void *pvTimerGetTimerID( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the ID assigned to the timer."]
    #[doc = ""]
    #[doc = " IDs are assigned to timers using the pvTimerID parameter of the call to"]
    #[doc = " xTimerCreated() that was used to create the timer, and by calling the"]
    #[doc = " vTimerSetTimerID() API function."]
    #[doc = ""]
    #[doc = " If the same callback function is assigned to multiple timers then the timer"]
    #[doc = " ID can be used as time specific (timer local) storage."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being queried."]
    #[doc = ""]
    #[doc = " @return The ID assigned to the timer being queried."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " See the xTimerCreate() API function example usage scenario."]
    pub fn pvTimerGetTimerID(xTimer: TimerHandle_t) -> *mut cty::c_void;
}
extern "C" {
    #[doc = " void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID );"]
    #[doc = ""]
    #[doc = " Sets the ID assigned to the timer."]
    #[doc = ""]
    #[doc = " IDs are assigned to timers using the pvTimerID parameter of the call to"]
    #[doc = " xTimerCreated() that was used to create the timer."]
    #[doc = ""]
    #[doc = " If the same callback function is assigned to multiple timers then the timer"]
    #[doc = " ID can be used as time specific (timer local) storage."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being updated."]
    #[doc = ""]
    #[doc = " @param pvNewID The ID to assign to the timer."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " See the xTimerCreate() API function example usage scenario."]
    pub fn vTimerSetTimerID(xTimer: TimerHandle_t, pvNewID: *mut cty::c_void);
}
extern "C" {
    #[doc = " BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Queries a timer to see if it is active or dormant."]
    #[doc = ""]
    #[doc = " A timer will be dormant if:"]
    #[doc = "     1) It has been created but not started, or"]
    #[doc = "     2) It is an expired one-shot timer that has not been restarted."]
    #[doc = ""]
    #[doc = " Timers are created in the dormant state.  The xTimerStart(), xTimerReset(),"]
    #[doc = " xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and"]
    #[doc = " xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the"]
    #[doc = " active state."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being queried."]
    #[doc = ""]
    #[doc = " @return pdFALSE will be returned if the timer is dormant.  A value other than"]
    #[doc = " pdFALSE will be returned if the timer is active."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @verbatim"]
    #[doc = " // This function assumes xTimer has already been created."]
    #[doc = " void vAFunction( TimerHandle_t xTimer )"]
    #[doc = " {"]
    #[doc = "     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently \"if( xTimerIsTimerActive( xTimer ) )\""]
    #[doc = "     {"]
    #[doc = "         // xTimer is active, do something."]
    #[doc = "     }"]
    #[doc = "     else"]
    #[doc = "     {"]
    #[doc = "         // xTimer is not active, do something else."]
    #[doc = "     }"]
    #[doc = " }"]
    #[doc = " @endverbatim"]
    pub fn xTimerIsTimerActive(xTimer: TimerHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " TaskHandle_t xTimerGetTimerDaemonTaskHandle( void );"]
    #[doc = ""]
    #[doc = " Simply returns the handle of the timer service/daemon task.  It it not valid"]
    #[doc = " to call xTimerGetTimerDaemonTaskHandle() before the scheduler has been started."]
    pub fn xTimerGetTimerDaemonTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn xTimerPendFunctionCallFromISR(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut cty::c_void,
        ulParameter2: u32,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTimerPendFunctionCall(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut cty::c_void,
        ulParameter2: u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " const char * const pcTimerGetName( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the name that was assigned to a timer when the timer was created."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return The name assigned to the timer specified by the xTimer parameter."]
    pub fn pcTimerGetName(xTimer: TimerHandle_t) -> *const cty::c_char;
}
extern "C" {
    #[doc = " void vTimerSetReloadMode( TimerHandle_t xTimer, const BaseType_t xAutoReload );"]
    #[doc = ""]
    #[doc = " Updates a timer to be either an auto-reload timer, in which case the timer"]
    #[doc = " automatically resets itself each time it expires, or a one-shot timer, in"]
    #[doc = " which case the timer will only expire once unless it is manually restarted."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being updated."]
    #[doc = ""]
    #[doc = " @param xAutoReload If xAutoReload is set to pdTRUE then the timer will"]
    #[doc = " expire repeatedly with a frequency set by the timer's period (see the"]
    #[doc = " xTimerPeriodInTicks parameter of the xTimerCreate() API function).  If"]
    #[doc = " xAutoReload is set to pdFALSE then the timer will be a one-shot timer and"]
    #[doc = " enter the dormant state after it expires."]
    pub fn vTimerSetReloadMode(xTimer: TimerHandle_t, xAutoReload: BaseType_t);
}
extern "C" {
    #[doc = " BaseType_t xTimerGetReloadMode( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Queries a timer to determine if it is an auto-reload timer, in which case the timer"]
    #[doc = " automatically resets itself each time it expires, or a one-shot timer, in"]
    #[doc = " which case the timer will only expire once unless it is manually restarted."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return If the timer is an auto-reload timer then pdTRUE is returned, otherwise"]
    #[doc = " pdFALSE is returned."]
    pub fn xTimerGetReloadMode(xTimer: TimerHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Queries a timer to determine if it is an auto-reload timer, in which case the timer"]
    #[doc = " automatically resets itself each time it expires, or a one-shot timer, in"]
    #[doc = " which case the timer will only expire once unless it is manually restarted."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return If the timer is an auto-reload timer then pdTRUE is returned, otherwise"]
    #[doc = " pdFALSE is returned."]
    pub fn uxTimerGetReloadMode(xTimer: TimerHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " TickType_t xTimerGetPeriod( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the period of a timer."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return The period of the timer in ticks."]
    pub fn xTimerGetPeriod(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    #[doc = " TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the time in ticks at which the timer will expire.  If this is less"]
    #[doc = " than the current tick count then the expiry time has overflowed from the"]
    #[doc = " current time."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return If the timer is running then the time in ticks at which the timer"]
    #[doc = " will next expire is returned.  If the timer is not running then the return"]
    #[doc = " value is undefined."]
    pub fn xTimerGetExpiryTime(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    pub fn xTimerGetStaticBuffer(
        xTimer: TimerHandle_t,
        ppxTimerBuffer: *mut *mut StaticTimer_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTimerCreateTimerTask() -> BaseType_t;
}
extern "C" {
    pub fn xTimerGenericCommandFromTask(
        xTimer: TimerHandle_t,
        xCommandID: BaseType_t,
        xOptionalValue: TickType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTimerGenericCommandFromISR(
        xTimer: TimerHandle_t,
        xCommandID: BaseType_t,
        xOptionalValue: TickType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " This function is used to provide a statically allocated block of memory to FreeRTOS to hold the Timer Task TCB.  This function is required when"]
    #[doc = " configSUPPORT_STATIC_ALLOCATION is set.  For more information see this URI: https://www.FreeRTOS.org/a00110.html#configSUPPORT_STATIC_ALLOCATION"]
    #[doc = ""]
    #[doc = " @param ppxTimerTaskTCBBuffer   A handle to a statically allocated TCB buffer"]
    #[doc = " @param ppxTimerTaskStackBuffer A handle to a statically allocated Stack buffer for the idle task"]
    #[doc = " @param puxTimerTaskStackSize   A pointer to the number of elements that will fit in the allocated stack buffer"]
    pub fn vApplicationGetTimerTaskMemory(
        ppxTimerTaskTCBBuffer: *mut *mut StaticTask_t,
        ppxTimerTaskStackBuffer: *mut *mut StackType_t,
        puxTimerTaskStackSize: *mut StackType_t,
    );
}
#[doc = " event_groups.h"]
#[doc = ""]
#[doc = " Type by which event groups are referenced.  For example, a call to"]
#[doc = " xEventGroupCreate() returns an EventGroupHandle_t variable that can then"]
#[doc = " be used as a parameter to other event group functions."]
#[doc = ""]
#[doc = " \\defgroup EventGroupHandle_t EventGroupHandle_t"]
#[doc = " \\ingroup EventGroup"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventGroupDef_t {
    _unused: [u8; 0],
}
pub type EventGroupHandle_t = *mut EventGroupDef_t;
pub type EventBits_t = TickType_t;
extern "C" {
    pub fn xEventGroupCreateStatic(
        pxEventGroupBuffer: *mut StaticEventGroup_t,
    ) -> EventGroupHandle_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " @code{c}"]
    #[doc = "  EventBits_t xEventGroupWaitBits(    EventGroupHandle_t xEventGroup,"]
    #[doc = "                                      const EventBits_t uxBitsToWaitFor,"]
    #[doc = "                                      const BaseType_t xClearOnExit,"]
    #[doc = "                                      const BaseType_t xWaitForAllBits,"]
    #[doc = "                                      const TickType_t xTicksToWait );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " [Potentially] block to wait for one or more bits to be set within a"]
    #[doc = " previously created event group."]
    #[doc = ""]
    #[doc = " This function cannot be called from an interrupt."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are being tested.  The"]
    #[doc = " event group must have previously been created using a call to"]
    #[doc = " xEventGroupCreate()."]
    #[doc = ""]
    #[doc = " @param uxBitsToWaitFor A bitwise value that indicates the bit or bits to test"]
    #[doc = " inside the event group.  For example, to wait for bit 0 and/or bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x05.  To wait for bits 0 and/or bit 1 and/or bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x07.  Etc."]
    #[doc = ""]
    #[doc = " @param xClearOnExit If xClearOnExit is set to pdTRUE then any bits within"]
    #[doc = " uxBitsToWaitFor that are set within the event group will be cleared before"]
    #[doc = " xEventGroupWaitBits() returns if the wait condition was met (if the function"]
    #[doc = " returns for a reason other than a timeout).  If xClearOnExit is set to"]
    #[doc = " pdFALSE then the bits set in the event group are not altered when the call to"]
    #[doc = " xEventGroupWaitBits() returns."]
    #[doc = ""]
    #[doc = " @param xWaitForAllBits If xWaitForAllBits is set to pdTRUE then"]
    #[doc = " xEventGroupWaitBits() will return when either all the bits in uxBitsToWaitFor"]
    #[doc = " are set or the specified block time expires.  If xWaitForAllBits is set to"]
    #[doc = " pdFALSE then xEventGroupWaitBits() will return when any one of the bits set"]
    #[doc = " in uxBitsToWaitFor is set or the specified block time expires.  The block"]
    #[doc = " time is specified by the xTicksToWait parameter."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time (specified in 'ticks') to wait"]
    #[doc = " for one/all (depending on the xWaitForAllBits value) of the bits specified by"]
    #[doc = " uxBitsToWaitFor to become set. A value of portMAX_DELAY can be used to block"]
    #[doc = " indefinitely (provided INCLUDE_vTaskSuspend is set to 1 in FreeRTOSConfig.h)."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time either the bits being waited"]
    #[doc = " for became set, or the block time expired.  Test the return value to know"]
    #[doc = " which bits were set.  If xEventGroupWaitBits() returned because its timeout"]
    #[doc = " expired then not all the bits being waited for will be set.  If"]
    #[doc = " xEventGroupWaitBits() returned because the bits it was waiting for were set"]
    #[doc = " then the returned value is the event group value before any bits were"]
    #[doc = " automatically cleared in the case that xClearOnExit parameter was set to"]
    #[doc = " pdTRUE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " #define BIT_0 ( 1 << 0 )"]
    #[doc = " #define BIT_4 ( 1 << 4 )"]
    #[doc = ""]
    #[doc = " void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxBits;"]
    #[doc = " const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "      // Wait a maximum of 100ms for either bit 0 or bit 4 to be set within"]
    #[doc = "      // the event group.  Clear the bits before exiting."]
    #[doc = "      uxBits = xEventGroupWaitBits("]
    #[doc = "                  xEventGroup,    // The event group being tested."]
    #[doc = "                  BIT_0 | BIT_4,  // The bits within the event group to wait for."]
    #[doc = "                  pdTRUE,         // BIT_0 and BIT_4 should be cleared before returning."]
    #[doc = "                  pdFALSE,        // Don't wait for both bits, either bit will do."]
    #[doc = "                  xTicksToWait ); // Wait a maximum of 100ms for either bit to be set."]
    #[doc = ""]
    #[doc = "      if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because both bits were set."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because just BIT_0 was set."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because just BIT_4 was set."]
    #[doc = "      }"]
    #[doc = "      else"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because xTicksToWait ticks passed"]
    #[doc = "          // without either BIT_0 or BIT_4 becoming set."]
    #[doc = "      }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xEventGroupWaitBits xEventGroupWaitBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupWaitBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToWaitFor: EventBits_t,
        xClearOnExit: BaseType_t,
        xWaitForAllBits: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " @code{c}"]
    #[doc = "  EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Clear bits within an event group.  This function cannot be called from an"]
    #[doc = " interrupt."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are to be cleared."]
    #[doc = ""]
    #[doc = " @param uxBitsToClear A bitwise value that indicates the bit or bits to clear"]
    #[doc = " in the event group.  For example, to clear bit 3 only, set uxBitsToClear to"]
    #[doc = " 0x08.  To clear bit 3 and bit 0 set uxBitsToClear to 0x09."]
    #[doc = ""]
    #[doc = " @return The value of the event group before the specified bits were cleared."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " #define BIT_0 ( 1 << 0 )"]
    #[doc = " #define BIT_4 ( 1 << 4 )"]
    #[doc = ""]
    #[doc = " void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxBits;"]
    #[doc = ""]
    #[doc = "      // Clear bit 0 and bit 4 in xEventGroup."]
    #[doc = "      uxBits = xEventGroupClearBits("]
    #[doc = "                              xEventGroup,    // The event group being updated."]
    #[doc = "                              BIT_0 | BIT_4 );// The bits being cleared."]
    #[doc = ""]
    #[doc = "      if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "      {"]
    #[doc = "          // Both bit 0 and bit 4 were set before xEventGroupClearBits() was"]
    #[doc = "          // called.  Both will now be clear (not set)."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 0 was set before xEventGroupClearBits() was called.  It will"]
    #[doc = "          // now be clear."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 4 was set before xEventGroupClearBits() was called.  It will"]
    #[doc = "          // now be clear."]
    #[doc = "      }"]
    #[doc = "      else"]
    #[doc = "      {"]
    #[doc = "          // Neither bit 0 nor bit 4 were set in the first place."]
    #[doc = "      }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xEventGroupClearBits xEventGroupClearBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupClearBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToClear: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " @code{c}"]
    #[doc = "  EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Set bits within an event group."]
    #[doc = " This function cannot be called from an interrupt.  xEventGroupSetBitsFromISR()"]
    #[doc = " is a version that can be called from an interrupt."]
    #[doc = ""]
    #[doc = " Setting bits in an event group will automatically unblock tasks that are"]
    #[doc = " blocked waiting for the bits."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are to be set."]
    #[doc = ""]
    #[doc = " @param uxBitsToSet A bitwise value that indicates the bit or bits to set."]
    #[doc = " For example, to set bit 3 only, set uxBitsToSet to 0x08.  To set bit 3"]
    #[doc = " and bit 0 set uxBitsToSet to 0x09."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time the call to"]
    #[doc = " xEventGroupSetBits() returns.  There are two reasons why the returned value"]
    #[doc = " might have the bits specified by the uxBitsToSet parameter cleared.  First,"]
    #[doc = " if setting a bit results in a task that was waiting for the bit leaving the"]
    #[doc = " blocked state then it is possible the bit will be cleared automatically"]
    #[doc = " (see the xClearBitOnExit parameter of xEventGroupWaitBits()).  Second, any"]
    #[doc = " unblocked (or otherwise Ready state) task that has a priority above that of"]
    #[doc = " the task that called xEventGroupSetBits() will execute and may change the"]
    #[doc = " event group value before the call to xEventGroupSetBits() returns."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " #define BIT_0 ( 1 << 0 )"]
    #[doc = " #define BIT_4 ( 1 << 4 )"]
    #[doc = ""]
    #[doc = " void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxBits;"]
    #[doc = ""]
    #[doc = "      // Set bit 0 and bit 4 in xEventGroup."]
    #[doc = "      uxBits = xEventGroupSetBits("]
    #[doc = "                          xEventGroup,    // The event group being updated."]
    #[doc = "                          BIT_0 | BIT_4 );// The bits being set."]
    #[doc = ""]
    #[doc = "      if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "      {"]
    #[doc = "          // Both bit 0 and bit 4 remained set when the function returned."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 0 remained set when the function returned, but bit 4 was"]
    #[doc = "          // cleared.  It might be that bit 4 was cleared automatically as a"]
    #[doc = "          // task that was waiting for bit 4 was removed from the Blocked"]
    #[doc = "          // state."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 4 remained set when the function returned, but bit 0 was"]
    #[doc = "          // cleared.  It might be that bit 0 was cleared automatically as a"]
    #[doc = "          // task that was waiting for bit 0 was removed from the Blocked"]
    #[doc = "          // state."]
    #[doc = "      }"]
    #[doc = "      else"]
    #[doc = "      {"]
    #[doc = "          // Neither bit 0 nor bit 4 remained set.  It might be that a task"]
    #[doc = "          // was waiting for both of the bits to be set, and the bits were"]
    #[doc = "          // cleared as the task left the Blocked state."]
    #[doc = "      }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xEventGroupSetBits xEventGroupSetBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupSetBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " @code{c}"]
    #[doc = "  EventBits_t xEventGroupSync(    EventGroupHandle_t xEventGroup,"]
    #[doc = "                                  const EventBits_t uxBitsToSet,"]
    #[doc = "                                  const EventBits_t uxBitsToWaitFor,"]
    #[doc = "                                  TickType_t xTicksToWait );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Atomically set bits within an event group, then wait for a combination of"]
    #[doc = " bits to be set within the same event group.  This functionality is typically"]
    #[doc = " used to synchronise multiple tasks, where each task has to wait for the other"]
    #[doc = " tasks to reach a synchronisation point before proceeding."]
    #[doc = ""]
    #[doc = " This function cannot be used from an interrupt."]
    #[doc = ""]
    #[doc = " The function will return before its block time expires if the bits specified"]
    #[doc = " by the uxBitsToWait parameter are set, or become set within that time.  In"]
    #[doc = " this case all the bits specified by uxBitsToWait will be automatically"]
    #[doc = " cleared before the function returns."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are being tested.  The"]
    #[doc = " event group must have previously been created using a call to"]
    #[doc = " xEventGroupCreate()."]
    #[doc = ""]
    #[doc = " @param uxBitsToSet The bits to set in the event group before determining"]
    #[doc = " if, and possibly waiting for, all the bits specified by the uxBitsToWait"]
    #[doc = " parameter are set."]
    #[doc = ""]
    #[doc = " @param uxBitsToWaitFor A bitwise value that indicates the bit or bits to test"]
    #[doc = " inside the event group.  For example, to wait for bit 0 and bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x05.  To wait for bits 0 and bit 1 and bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x07.  Etc."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time (specified in 'ticks') to wait"]
    #[doc = " for all of the bits specified by uxBitsToWaitFor to become set."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time either the bits being waited"]
    #[doc = " for became set, or the block time expired.  Test the return value to know"]
    #[doc = " which bits were set.  If xEventGroupSync() returned because its timeout"]
    #[doc = " expired then not all the bits being waited for will be set.  If"]
    #[doc = " xEventGroupSync() returned because all the bits it was waiting for were"]
    #[doc = " set then the returned value is the event group value before any bits were"]
    #[doc = " automatically cleared."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " // Bits used by the three tasks."]
    #[doc = " #define TASK_0_BIT     ( 1 << 0 )"]
    #[doc = " #define TASK_1_BIT     ( 1 << 1 )"]
    #[doc = " #define TASK_2_BIT     ( 1 << 2 )"]
    #[doc = ""]
    #[doc = " #define ALL_SYNC_BITS ( TASK_0_BIT | TASK_1_BIT | TASK_2_BIT )"]
    #[doc = ""]
    #[doc = " // Use an event group to synchronise three tasks.  It is assumed this event"]
    #[doc = " // group has already been created elsewhere."]
    #[doc = " EventGroupHandle_t xEventBits;"]
    #[doc = ""]
    #[doc = " void vTask0( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxReturn;"]
    #[doc = " TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "      // Perform task functionality here."]
    #[doc = ""]
    #[doc = "      // Set bit 0 in the event flag to note this task has reached the"]
    #[doc = "      // sync point.  The other two tasks will set the other two bits defined"]
    #[doc = "      // by ALL_SYNC_BITS.  All three tasks have reached the synchronisation"]
    #[doc = "      // point when all the ALL_SYNC_BITS are set.  Wait a maximum of 100ms"]
    #[doc = "      // for this to happen."]
    #[doc = "      uxReturn = xEventGroupSync( xEventBits, TASK_0_BIT, ALL_SYNC_BITS, xTicksToWait );"]
    #[doc = ""]
    #[doc = "      if( ( uxReturn & ALL_SYNC_BITS ) == ALL_SYNC_BITS )"]
    #[doc = "      {"]
    #[doc = "          // All three tasks reached the synchronisation point before the call"]
    #[doc = "          // to xEventGroupSync() timed out."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " void vTask1( void *pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "      // Perform task functionality here."]
    #[doc = ""]
    #[doc = "      // Set bit 1 in the event flag to note this task has reached the"]
    #[doc = "      // synchronisation point.  The other two tasks will set the other two"]
    #[doc = "      // bits defined by ALL_SYNC_BITS.  All three tasks have reached the"]
    #[doc = "      // synchronisation point when all the ALL_SYNC_BITS are set.  Wait"]
    #[doc = "      // indefinitely for this to happen."]
    #[doc = "      xEventGroupSync( xEventBits, TASK_1_BIT, ALL_SYNC_BITS, portMAX_DELAY );"]
    #[doc = ""]
    #[doc = "      // xEventGroupSync() was called with an indefinite block time, so"]
    #[doc = "      // this task will only reach here if the synchronisation was made by all"]
    #[doc = "      // three tasks, so there is no need to test the return value."]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " void vTask2( void *pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "      // Perform task functionality here."]
    #[doc = ""]
    #[doc = "      // Set bit 2 in the event flag to note this task has reached the"]
    #[doc = "      // synchronisation point.  The other two tasks will set the other two"]
    #[doc = "      // bits defined by ALL_SYNC_BITS.  All three tasks have reached the"]
    #[doc = "      // synchronisation point when all the ALL_SYNC_BITS are set.  Wait"]
    #[doc = "      // indefinitely for this to happen."]
    #[doc = "      xEventGroupSync( xEventBits, TASK_2_BIT, ALL_SYNC_BITS, portMAX_DELAY );"]
    #[doc = ""]
    #[doc = "      // xEventGroupSync() was called with an indefinite block time, so"]
    #[doc = "      // this task will only reach here if the synchronisation was made by all"]
    #[doc = "      // three tasks, so there is no need to test the return value."]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xEventGroupSync xEventGroupSync"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupSync(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
        uxBitsToWaitFor: EventBits_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " @code{c}"]
    #[doc = "  EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " A version of xEventGroupGetBits() that can be called from an ISR."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group being queried."]
    #[doc = ""]
    #[doc = " @return The event group bits at the time xEventGroupGetBitsFromISR() was called."]
    #[doc = ""]
    #[doc = " \\defgroup xEventGroupGetBitsFromISR xEventGroupGetBitsFromISR"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupGetBitsFromISR(xEventGroup: EventGroupHandle_t) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " @code{c}"]
    #[doc = "  void xEventGroupDelete( EventGroupHandle_t xEventGroup );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Delete an event group that was previously created by a call to"]
    #[doc = " xEventGroupCreate().  Tasks that are blocked on the event group will be"]
    #[doc = " unblocked and obtain 0 as the event group's value."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group being deleted."]
    pub fn vEventGroupDelete(xEventGroup: EventGroupHandle_t);
}
extern "C" {
    pub fn xEventGroupGetStaticBuffer(
        xEventGroup: EventGroupHandle_t,
        ppxEventGroupBuffer: *mut *mut StaticEventGroup_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn vEventGroupSetBitsCallback(pvEventGroup: *mut cty::c_void, ulBitsToSet: u32);
}
extern "C" {
    pub fn vEventGroupClearBitsCallback(pvEventGroup: *mut cty::c_void, ulBitsToClear: u32);
}
#[doc = " Type by which queues are referenced.  For example, a call to xQueueCreate()"]
#[doc = " returns an QueueHandle_t variable that can then be used as a parameter to"]
#[doc = " xQueueSend(), xQueueReceive(), etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueDefinition {
    _unused: [u8; 0],
}
pub type QueueHandle_t = *mut QueueDefinition;
#[doc = " Type by which queue sets are referenced.  For example, a call to"]
#[doc = " xQueueCreateSet() returns an xQueueSet variable that can then be used as a"]
#[doc = " parameter to xQueueSelectFromSet(), xQueueAddToSet(), etc."]
pub type QueueSetHandle_t = *mut QueueDefinition;
#[doc = " Queue sets can contain both queues and semaphores, so the"]
#[doc = " QueueSetMemberHandle_t is defined as a type to be used where a parameter or"]
#[doc = " return value can be either an QueueHandle_t or an SemaphoreHandle_t."]
pub type QueueSetMemberHandle_t = *mut QueueDefinition;
extern "C" {
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueueGenericSend("]
    #[doc = "                                  QueueHandle_t xQueue,"]
    #[doc = "                                  const void * pvItemToQueue,"]
    #[doc = "                                  TickType_t xTicksToWait"]
    #[doc = "                                  BaseType_t xCopyPosition"]
    #[doc = "                              );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " It is preferred that the macros xQueueSend(), xQueueSendToFront() and"]
    #[doc = " xQueueSendToBack() are used in place of calling this function directly."]
    #[doc = ""]
    #[doc = " Post an item on a queue.  The item is queued by copy, not by reference."]
    #[doc = " This function must not be called from an interrupt service routine."]
    #[doc = " See xQueueSendFromISR () for an alternative which may be used in an ISR."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue on which the item is to be posted."]
    #[doc = ""]
    #[doc = " @param pvItemToQueue A pointer to the item that is to be placed on the"]
    #[doc = " queue.  The size of the items the queue will hold was defined when the"]
    #[doc = " queue was created, so this many bytes will be copied from pvItemToQueue"]
    #[doc = " into the queue storage area."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for space to become available on the queue, should it already"]
    #[doc = " be full.  The call will return immediately if this is set to 0 and the"]
    #[doc = " queue is full.  The time is defined in tick periods so the constant"]
    #[doc = " portTICK_PERIOD_MS should be used to convert to real time if this is required."]
    #[doc = ""]
    #[doc = " @param xCopyPosition Can take the value queueSEND_TO_BACK to place the"]
    #[doc = " item at the back of the queue, or queueSEND_TO_FRONT to place the item"]
    #[doc = " at the front of the queue (for high priority messages)."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " uint32_t ulVar = 10UL;"]
    #[doc = ""]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " QueueHandle_t xQueue1, xQueue2;"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 uint32_t values."]
    #[doc = "  xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  if( xQueue1 != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Send an uint32_t.  Wait for 10 ticks for space to become"]
    #[doc = "      // available if necessary."]
    #[doc = "      if( xQueueGenericSend( xQueue1, ( void * ) &ulVar, ( TickType_t ) 10, queueSEND_TO_BACK ) != pdPASS )"]
    #[doc = "      {"]
    #[doc = "          // Failed to post the message, even after 10 ticks."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  if( xQueue2 != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "      // queue is already full."]
    #[doc = "      pxMessage = & xMessage;"]
    #[doc = "      xQueueGenericSend( xQueue2, ( void * ) &pxMessage, ( TickType_t ) 0, queueSEND_TO_BACK );"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xQueueSend xQueueSend"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueGenericSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const cty::c_void,
        xTicksToWait: TickType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueuePeek("]
    #[doc = "                           QueueHandle_t xQueue,"]
    #[doc = "                           void * const pvBuffer,"]
    #[doc = "                           TickType_t xTicksToWait"]
    #[doc = "                       );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Receive an item from a queue without removing the item from the queue."]
    #[doc = " The item is received by copy so a buffer of adequate size must be"]
    #[doc = " provided.  The number of bytes copied into the buffer was defined when"]
    #[doc = " the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items remain on the queue so will be returned again"]
    #[doc = " by the next call, or a call to xQueueReceive()."]
    #[doc = ""]
    #[doc = " This macro must not be used in an interrupt service routine.  See"]
    #[doc = " xQueuePeekFromISR() for an alternative that can be called from an interrupt"]
    #[doc = " service routine."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for an item to receive should the queue be empty at the time"]
    #[doc = " of the call. The time is defined in tick periods so the constant"]
    #[doc = " portTICK_PERIOD_MS should be used to convert to real time if this is required."]
    #[doc = " xQueuePeek() will return immediately if xTicksToWait is 0 and the queue"]
    #[doc = " is empty."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Task to create a queue and post a value."]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "  // queue is already full."]
    #[doc = "  pxMessage = & xMessage;"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // Task to peek the data from the queue."]
    #[doc = " void vADifferentTask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxRxedMessage;"]
    #[doc = ""]
    #[doc = "  if( xQueue != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Peek a message on the created queue.  Block for 10 ticks if a"]
    #[doc = "      // message is not immediately available."]
    #[doc = "      if( xQueuePeek( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )"]
    #[doc = "      {"]
    #[doc = "          // pcRxedMessage now points to the struct AMessage variable posted"]
    #[doc = "          // by vATask, but the item still remains on the queue."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xQueuePeek xQueuePeek"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueuePeek(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueuePeekFromISR("]
    #[doc = "                                  QueueHandle_t xQueue,"]
    #[doc = "                                  void *pvBuffer,"]
    #[doc = "                              );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " A version of xQueuePeek() that can be called from an interrupt service"]
    #[doc = " routine (ISR)."]
    #[doc = ""]
    #[doc = " Receive an item from a queue without removing the item from the queue."]
    #[doc = " The item is received by copy so a buffer of adequate size must be"]
    #[doc = " provided.  The number of bytes copied into the buffer was defined when"]
    #[doc = " the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items remain on the queue so will be returned again"]
    #[doc = " by the next call, or a call to xQueueReceive()."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xQueuePeekFromISR xQueuePeekFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueuePeekFromISR(xQueue: QueueHandle_t, pvBuffer: *mut cty::c_void) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueueReceive("]
    #[doc = "                               QueueHandle_t xQueue,"]
    #[doc = "                               void *pvBuffer,"]
    #[doc = "                               TickType_t xTicksToWait"]
    #[doc = "                          );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Receive an item from a queue.  The item is received by copy so a buffer of"]
    #[doc = " adequate size must be provided.  The number of bytes copied into the buffer"]
    #[doc = " was defined when the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items are removed from the queue."]
    #[doc = ""]
    #[doc = " This function must not be used in an interrupt service routine.  See"]
    #[doc = " xQueueReceiveFromISR for an alternative that can."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for an item to receive should the queue be empty at the time"]
    #[doc = " of the call. xQueueReceive() will return immediately if xTicksToWait"]
    #[doc = " is zero and the queue is empty.  The time is defined in tick periods so the"]
    #[doc = " constant portTICK_PERIOD_MS should be used to convert to real time if this is"]
    #[doc = " required."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Task to create a queue and post a value."]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "  // queue is already full."]
    #[doc = "  pxMessage = & xMessage;"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // Task to receive from the queue."]
    #[doc = " void vADifferentTask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxRxedMessage;"]
    #[doc = ""]
    #[doc = "  if( xQueue != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Receive a message on the created queue.  Block for 10 ticks if a"]
    #[doc = "      // message is not immediately available."]
    #[doc = "      if( xQueueReceive( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )"]
    #[doc = "      {"]
    #[doc = "          // pcRxedMessage now points to the struct AMessage variable posted"]
    #[doc = "          // by vATask."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xQueueReceive xQueueReceive"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Return the number of messages stored in a queue."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue being queried."]
    #[doc = ""]
    #[doc = " @return The number of messages available in the queue."]
    #[doc = ""]
    #[doc = " \\defgroup uxQueueMessagesWaiting uxQueueMessagesWaiting"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn uxQueueMessagesWaiting(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Return the number of free spaces available in a queue.  This is equal to the"]
    #[doc = " number of items that can be sent to the queue before the queue becomes full"]
    #[doc = " if no items are removed."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue being queried."]
    #[doc = ""]
    #[doc = " @return The number of spaces available in the queue."]
    #[doc = ""]
    #[doc = " \\defgroup uxQueueMessagesWaiting uxQueueMessagesWaiting"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn uxQueueSpacesAvailable(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " void vQueueDelete( QueueHandle_t xQueue );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Delete a queue - freeing all the memory allocated for storing of items"]
    #[doc = " placed on the queue."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue to be deleted."]
    #[doc = ""]
    #[doc = " \\defgroup vQueueDelete vQueueDelete"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn vQueueDelete(xQueue: QueueHandle_t);
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueueGenericSendFromISR("]
    #[doc = "                                         QueueHandle_t    xQueue,"]
    #[doc = "                                         const    void    *pvItemToQueue,"]
    #[doc = "                                         BaseType_t  *pxHigherPriorityTaskWoken,"]
    #[doc = "                                         BaseType_t  xCopyPosition"]
    #[doc = "                                     );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " It is preferred that the macros xQueueSendFromISR(),"]
    #[doc = " xQueueSendToFrontFromISR() and xQueueSendToBackFromISR() be used in place"]
    #[doc = " of calling this function directly.  xQueueGiveFromISR() is an"]
    #[doc = " equivalent for use by semaphores that don't actually copy any data."]
    #[doc = ""]
    #[doc = " Post an item on a queue.  It is safe to use this function from within an"]
    #[doc = " interrupt service routine."]
    #[doc = ""]
    #[doc = " Items are queued by copy not reference so it is preferable to only"]
    #[doc = " queue small items, especially when called from an ISR.  In most cases"]
    #[doc = " it would be preferable to store a pointer to the item being queued."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue on which the item is to be posted."]
    #[doc = ""]
    #[doc = " @param pvItemToQueue A pointer to the item that is to be placed on the"]
    #[doc = " queue.  The size of the items the queue will hold was defined when the"]
    #[doc = " queue was created, so this many bytes will be copied from pvItemToQueue"]
    #[doc = " into the queue storage area."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken xQueueGenericSendFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task"]
    #[doc = " to unblock, and the unblocked task has a priority higher than the currently"]
    #[doc = " running task.  If xQueueGenericSendFromISR() sets this value to pdTRUE then"]
    #[doc = " a context switch should be requested before the interrupt is exited."]
    #[doc = ""]
    #[doc = " @param xCopyPosition Can take the value queueSEND_TO_BACK to place the"]
    #[doc = " item at the back of the queue, or queueSEND_TO_FRONT to place the item"]
    #[doc = " at the front of the queue (for high priority messages)."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the data was successfully sent to the queue, otherwise"]
    #[doc = " errQUEUE_FULL."]
    #[doc = ""]
    #[doc = " Example usage for buffered IO (where the ISR can obtain more than one value"]
    #[doc = " per call):"]
    #[doc = " @code{c}"]
    #[doc = " void vBufferISR( void )"]
    #[doc = " {"]
    #[doc = " char cIn;"]
    #[doc = " BaseType_t xHigherPriorityTaskWokenByPost;"]
    #[doc = ""]
    #[doc = "  // We have not woken a task at the start of the ISR."]
    #[doc = "  xHigherPriorityTaskWokenByPost = pdFALSE;"]
    #[doc = ""]
    #[doc = "  // Loop until the buffer is empty."]
    #[doc = "  do"]
    #[doc = "  {"]
    #[doc = "      // Obtain a byte from the buffer."]
    #[doc = "      cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );"]
    #[doc = ""]
    #[doc = "      // Post each byte."]
    #[doc = "      xQueueGenericSendFromISR( xRxQueue, &cIn, &xHigherPriorityTaskWokenByPost, queueSEND_TO_BACK );"]
    #[doc = ""]
    #[doc = "  } while( portINPUT_BYTE( BUFFER_COUNT ) );"]
    #[doc = ""]
    #[doc = "  // Now the buffer is empty we can switch context if necessary."]
    #[doc = "  if( xHigherPriorityTaskWokenByPost )"]
    #[doc = "  {"]
    #[doc = "       // As xHigherPriorityTaskWokenByPost is now set to pdTRUE then a context"]
    #[doc = "       // switch should be requested. The macro used is port specific and"]
    #[doc = "       // will be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() -"]
    #[doc = "       // refer to the documentation page for the port being used."]
    #[doc = "       portYIELD_FROM_ISR( xHigherPriorityTaskWokenByPost );"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " \\defgroup xQueueSendFromISR xQueueSendFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueGenericSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const cty::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveFromISR(
        xQueue: QueueHandle_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueueReceiveFromISR("]
    #[doc = "                                     QueueHandle_t    xQueue,"]
    #[doc = "                                     void             *pvBuffer,"]
    #[doc = "                                     BaseType_t       *pxTaskWoken"]
    #[doc = "                                 );"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " Receive an item from a queue.  It is safe to use this function from within an"]
    #[doc = " interrupt service routine."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken A task may be blocked waiting for space to"]
    #[doc = " become available on the queue.  If xQueueReceiveFromISR causes such a task"]
    #[doc = " to unblock *pxTaskWoken will get set to pdTRUE, otherwise *pxTaskWoken will"]
    #[doc = " remain unchanged."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Function to create a queue and post some values."]
    #[doc = " void vAFunction( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " char cValueToPost;"]
    #[doc = " const TickType_t xTicksToWait = ( TickType_t )0xff;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 characters."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( char ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Post some characters that will be used within an ISR.  If the queue"]
    #[doc = "  // is full then this task will block for xTicksToWait ticks."]
    #[doc = "  cValueToPost = 'a';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = "  cValueToPost = 'b';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = ""]
    #[doc = "  // ... keep posting characters ... this task may block when the queue"]
    #[doc = "  // becomes full."]
    #[doc = ""]
    #[doc = "  cValueToPost = 'c';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // ISR that outputs all the characters received on the queue."]
    #[doc = " void vISR_Routine( void )"]
    #[doc = " {"]
    #[doc = " BaseType_t xTaskWokenByReceive = pdFALSE;"]
    #[doc = " char cRxedChar;"]
    #[doc = ""]
    #[doc = "  while( xQueueReceiveFromISR( xQueue, ( void * ) &cRxedChar, &xTaskWokenByReceive) )"]
    #[doc = "  {"]
    #[doc = "      // A character was received.  Output the character now."]
    #[doc = "      vOutputCharacter( cRxedChar );"]
    #[doc = ""]
    #[doc = "      // If removing the character from the queue woke the task that was"]
    #[doc = "      // posting onto the queue xTaskWokenByReceive will have been set to"]
    #[doc = "      // pdTRUE.  No matter how many times this loop iterates only one"]
    #[doc = "      // task will be woken."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  if( xTaskWokenByReceive != ( char ) pdFALSE;"]
    #[doc = "  {"]
    #[doc = "      taskYIELD ();"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " \\defgroup xQueueReceiveFromISR xQueueReceiveFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueEmptyFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueFullFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn uxQueueMessagesWaitingFromISR(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn xQueueCreateMutex(ucQueueType: u8) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateMutexStatic(
        ucQueueType: u8,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphore(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphoreStatic(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueSemaphoreTake(xQueue: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGetMutexHolder(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueGetMutexHolderFromISR(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueTakeMutexRecursive(xMutex: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveMutexRecursive(xMutex: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn vQueueAddToRegistry(xQueue: QueueHandle_t, pcQueueName: *const cty::c_char);
}
extern "C" {
    pub fn vQueueUnregisterQueue(xQueue: QueueHandle_t);
}
extern "C" {
    pub fn pcQueueGetName(xQueue: QueueHandle_t) -> *const cty::c_char;
}
extern "C" {
    pub fn xQueueGenericCreateStatic(
        uxQueueLength: UBaseType_t,
        uxItemSize: UBaseType_t,
        pucQueueStorage: *mut u8,
        pxStaticQueue: *mut StaticQueue_t,
        ucQueueType: u8,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueGenericGetStaticBuffers(
        xQueue: QueueHandle_t,
        ppucQueueStorage: *mut *mut u8,
        ppxStaticQueue: *mut *mut StaticQueue_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn vQueueWaitForMessageRestricted(
        xQueue: QueueHandle_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xQueueGenericReset(xQueue: QueueHandle_t, xNewQueue: BaseType_t) -> BaseType_t;
}
extern "C" {
    pub fn uxQueueGetQueueItemSize(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn uxQueueGetQueueLength(xQueue: QueueHandle_t) -> UBaseType_t;
}
