/* automatically generated by rust-bindgen 0.59.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const TICK_TYPE_WIDTH_16_BITS: u32 = 0;
pub const TICK_TYPE_WIDTH_32_BITS: u32 = 1;
pub const TICK_TYPE_WIDTH_64_BITS: u32 = 2;
pub const configASSERT_DEFINED: u32 = 1;
pub const configQUEUE_REGISTRY_SIZE: u32 = 20;
pub const configUSE_PREEMPTION: u32 = 1;
pub const configUSE_TIME_SLICING: u32 = 0;
pub const configUSE_PORT_OPTIMISED_TASK_SELECTION: u32 = 0;
pub const configUSE_IDLE_HOOK: u32 = 1;
pub const configUSE_TICK_HOOK: u32 = 1;
pub const configUSE_DAEMON_TASK_STARTUP_HOOK: u32 = 0;
pub const configMAX_TASK_NAME_LEN: u32 = 10;
pub const configUSE_TRACE_FACILITY: u32 = 1;
pub const configUSE_16_BIT_TICKS: u32 = 0;
pub const configIDLE_SHOULD_YIELD: u32 = 1;
pub const configUSE_CO_ROUTINES: u32 = 0;
pub const configMAX_PRIORITIES: u32 = 10;
pub const configMAX_CO_ROUTINE_PRIORITIES: u32 = 2;
pub const configTIMER_QUEUE_LENGTH: u32 = 5;
pub const configTIMER_TASK_PRIORITY: u32 = 9;
pub const configUSE_COUNTING_SEMAPHORES: u32 = 1;
pub const configSUPPORT_DYNAMIC_ALLOCATION: u32 = 1;
pub const configSUPPORT_STATIC_ALLOCATION: u32 = 1;
pub const configNUM_TX_DESCRIPTORS: u32 = 15;
pub const configSTREAM_BUFFER_TRIGGER_LEVEL_TEST_MARGIN: u32 = 2;
pub const configCHECK_FOR_STACK_OVERFLOW: u32 = 2;
pub const configALLOW_UNPRIVILEGED_CRITICAL_SECTIONS: u32 = 0;
pub const configUSE_MALLOC_FAILED_HOOK: u32 = 1;
pub const configUSE_MUTEXES: u32 = 1;
pub const configUSE_RECURSIVE_MUTEXES: u32 = 1;
pub const configUSE_TIMERS: u32 = 1;
pub const INCLUDE_vTaskPrioritySet: u32 = 1;
pub const INCLUDE_uxTaskPriorityGet: u32 = 1;
pub const INCLUDE_vTaskDelete: u32 = 1;
pub const INCLUDE_vTaskCleanUpResources: u32 = 0;
pub const INCLUDE_vTaskSuspend: u32 = 1;
pub const INCLUDE_vTaskDelayUntil: u32 = 1;
pub const INCLUDE_vTaskDelay: u32 = 1;
pub const INCLUDE_uxTaskGetStackHighWaterMark: u32 = 1;
pub const INCLUDE_uxTaskGetStackHighWaterMark2: u32 = 1;
pub const INCLUDE_xTaskGetSchedulerState: u32 = 1;
pub const INCLUDE_xTimerGetTimerDaemonTaskHandle: u32 = 1;
pub const INCLUDE_xTaskGetIdleTaskHandle: u32 = 1;
pub const INCLUDE_xTaskGetHandle: u32 = 1;
pub const INCLUDE_eTaskGetState: u32 = 1;
pub const INCLUDE_xSemaphoreGetMutexHolder: u32 = 1;
pub const INCLUDE_xTimerPendFunctionCall: u32 = 1;
pub const INCLUDE_xTaskAbortDelay: u32 = 1;
pub const projCOVERAGE_TEST: u32 = 0;
pub const configKERNEL_INTERRUPT_PRIORITY: u32 = 255;
pub const configMAX_SYSCALL_INTERRUPT_PRIORITY: u32 = 4;
pub const configMAC_INTERRUPT_PRIORITY: u32 = 5;
pub const configENFORCE_SYSTEM_CALLS_FROM_KERNEL_ONLY: u32 = 1;
pub const configUSE_MPU_WRAPPERS_V1: u32 = 0;
pub const configENABLE_ACCESS_CONTROL_LIST: u32 = 1;
pub const configPROTECTED_KERNEL_OBJECT_POOL_SIZE: u32 = 150;
pub const configSYSTEM_CALL_STACK_SIZE: u32 = 128;
pub const configTICK_TYPE_WIDTH_IN_BITS: u32 = 1;
pub const configNUMBER_OF_CORES: u32 = 1;
pub const errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: i32 = -1;
pub const errQUEUE_BLOCKED: i32 = -4;
pub const errQUEUE_YIELD: i32 = -5;
pub const configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES: u32 = 0;
pub const pdINTEGRITY_CHECK_VALUE: u32 = 1515870810;
pub const pdFREERTOS_ERRNO_NONE: u32 = 0;
pub const pdFREERTOS_ERRNO_ENOENT: u32 = 2;
pub const pdFREERTOS_ERRNO_EINTR: u32 = 4;
pub const pdFREERTOS_ERRNO_EIO: u32 = 5;
pub const pdFREERTOS_ERRNO_ENXIO: u32 = 6;
pub const pdFREERTOS_ERRNO_EBADF: u32 = 9;
pub const pdFREERTOS_ERRNO_EAGAIN: u32 = 11;
pub const pdFREERTOS_ERRNO_EWOULDBLOCK: u32 = 11;
pub const pdFREERTOS_ERRNO_ENOMEM: u32 = 12;
pub const pdFREERTOS_ERRNO_EACCES: u32 = 13;
pub const pdFREERTOS_ERRNO_EFAULT: u32 = 14;
pub const pdFREERTOS_ERRNO_EBUSY: u32 = 16;
pub const pdFREERTOS_ERRNO_EEXIST: u32 = 17;
pub const pdFREERTOS_ERRNO_EXDEV: u32 = 18;
pub const pdFREERTOS_ERRNO_ENODEV: u32 = 19;
pub const pdFREERTOS_ERRNO_ENOTDIR: u32 = 20;
pub const pdFREERTOS_ERRNO_EISDIR: u32 = 21;
pub const pdFREERTOS_ERRNO_EINVAL: u32 = 22;
pub const pdFREERTOS_ERRNO_ENOSPC: u32 = 28;
pub const pdFREERTOS_ERRNO_ESPIPE: u32 = 29;
pub const pdFREERTOS_ERRNO_EROFS: u32 = 30;
pub const pdFREERTOS_ERRNO_EUNATCH: u32 = 42;
pub const pdFREERTOS_ERRNO_EBADE: u32 = 50;
pub const pdFREERTOS_ERRNO_EFTYPE: u32 = 79;
pub const pdFREERTOS_ERRNO_ENMFILE: u32 = 89;
pub const pdFREERTOS_ERRNO_ENOTEMPTY: u32 = 90;
pub const pdFREERTOS_ERRNO_ENAMETOOLONG: u32 = 91;
pub const pdFREERTOS_ERRNO_EOPNOTSUPP: u32 = 95;
pub const pdFREERTOS_ERRNO_EAFNOSUPPORT: u32 = 97;
pub const pdFREERTOS_ERRNO_ENOBUFS: u32 = 105;
pub const pdFREERTOS_ERRNO_ENOPROTOOPT: u32 = 109;
pub const pdFREERTOS_ERRNO_EADDRINUSE: u32 = 112;
pub const pdFREERTOS_ERRNO_ETIMEDOUT: u32 = 116;
pub const pdFREERTOS_ERRNO_EINPROGRESS: u32 = 119;
pub const pdFREERTOS_ERRNO_EALREADY: u32 = 120;
pub const pdFREERTOS_ERRNO_EADDRNOTAVAIL: u32 = 125;
pub const pdFREERTOS_ERRNO_EISCONN: u32 = 127;
pub const pdFREERTOS_ERRNO_ENOTCONN: u32 = 128;
pub const pdFREERTOS_ERRNO_ENOMEDIUM: u32 = 135;
pub const pdFREERTOS_ERRNO_EILSEQ: u32 = 138;
pub const pdFREERTOS_ERRNO_ECANCELED: u32 = 140;
pub const pdFREERTOS_LITTLE_ENDIAN: u32 = 0;
pub const pdFREERTOS_BIG_ENDIAN: u32 = 1;
pub const pdLITTLE_ENDIAN: u32 = 0;
pub const pdBIG_ENDIAN: u32 = 1;
pub const portTICK_TYPE_IS_ATOMIC: u32 = 1;
pub const portSTACK_GROWTH: i32 = -1;
pub const portBYTE_ALIGNMENT: u32 = 8;
pub const portNVIC_PENDSVSET_BIT: u32 = 268435456;
pub const portBYTE_ALIGNMENT_MASK: u32 = 7;
pub const portUSING_MPU_WRAPPERS: u32 = 0;
pub const portNUM_CONFIGURABLE_REGIONS: u32 = 1;
pub const portHAS_STACK_OVERFLOW_CHECKING: u32 = 0;
pub const configSTACK_ALLOCATION_FROM_SEPARATE_HEAP: u32 = 0;
pub const configUSE_NEWLIB_REENTRANT: u32 = 0;
pub const configUSE_PICOLIBC_TLS: u32 = 0;
pub const configUSE_C_RUNTIME_TLS_SUPPORT: u32 = 0;
pub const INCLUDE_xTaskDelayUntil: u32 = 1;
pub const INCLUDE_xQueueGetMutexHolder: u32 = 0;
pub const INCLUDE_xTaskResumeFromISR: u32 = 1;
pub const INCLUDE_xTaskGetCurrentTaskHandle: u32 = 1;
pub const configUSE_APPLICATION_TASK_TAG: u32 = 0;
pub const configNUM_THREAD_LOCAL_STORAGE_POINTERS: u32 = 0;
pub const configUSE_TASK_PREEMPTION_DISABLE: u32 = 0;
pub const configUSE_ALTERNATIVE_API: u32 = 0;
pub const portCRITICAL_NESTING_IN_TCB: u32 = 0;
pub const configPRECONDITION_DEFINED: u32 = 0;
pub const configCHECK_HANDLER_INSTALLATION: u32 = 1;
pub const configRUN_MULTIPLE_PRIORITIES: u32 = 0;
pub const configUSE_CORE_AFFINITY: u32 = 0;
pub const configUSE_PASSIVE_IDLE_HOOK: u32 = 0;
pub const portHAS_NESTED_INTERRUPTS: u32 = 1;
pub const configUSE_MINI_LIST_ITEM: u32 = 1;
pub const configRECORD_STACK_HIGH_ADDRESS: u32 = 0;
pub const configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H: u32 = 0;
pub const configGENERATE_RUN_TIME_STATS: u32 = 0;
pub const configEXPECTED_IDLE_TIME_BEFORE_SLEEP: u32 = 2;
pub const configUSE_TICKLESS_IDLE: u32 = 0;
pub const configUSE_QUEUE_SETS: u32 = 0;
pub const configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS: u32 = 0;
pub const configUSE_STATS_FORMATTING_FUNCTIONS: u32 = 0;
pub const configAPPLICATION_ALLOCATED_HEAP: u32 = 0;
pub const configENABLE_HEAP_PROTECTOR: u32 = 0;
pub const configUSE_TASK_NOTIFICATIONS: u32 = 1;
pub const configTASK_NOTIFICATION_ARRAY_ENTRIES: u32 = 1;
pub const configUSE_POSIX_ERRNO: u32 = 0;
pub const configUSE_SB_COMPLETED_CALLBACK: u32 = 0;
pub const configKERNEL_PROVIDED_STATIC_MEMORY: u32 = 0;
pub const configSTATS_BUFFER_MAX_LENGTH: u32 = 65535;
pub const configINITIAL_TICK_COUNT: u32 = 0;
pub const configENABLE_BACKWARD_COMPATIBILITY: u32 = 1;
pub const configUSE_TASK_FPU_SUPPORT: u32 = 1;
pub const configENABLE_MPU: u32 = 0;
pub const configENABLE_FPU: u32 = 1;
pub const configENABLE_MVE: u32 = 0;
pub const configENABLE_TRUSTZONE: u32 = 1;
pub const configRUN_FREERTOS_SECURE_ONLY: u32 = 0;
pub const configRUN_ADDITIONAL_TESTS: u32 = 0;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    pub fn vAssertCalled();
}
extern "C" {
    pub fn ulGetRunTimeCounterValue() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn vLoggingPrintf(pcFormatString: *const ::std::os::raw::c_char, ...);
}
pub type TaskFunction_t =
    ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void)>;
pub type StackType_t = u32;
pub type BaseType_t = ::std::os::raw::c_long;
pub type UBaseType_t = ::std::os::raw::c_ulong;
pub type TickType_t = u32;
extern "C" {
    pub fn vPortEnterCritical();
}
extern "C" {
    pub fn vPortExitCritical();
}
extern "C" {
    pub fn vPortSuppressTicksAndSleep(xExpectedIdleTime: TickType_t);
}
extern "C" {
    pub fn vPortValidateInterruptPriority();
}
extern "C" {
    pub fn pxPortInitialiseStack(
        pxTopOfStack: *mut StackType_t,
        pxCode: TaskFunction_t,
        pvParameters: *mut ::std::os::raw::c_void,
    ) -> *mut StackType_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapRegion {
    pub pucStartAddress: *mut u8,
    pub xSizeInBytes: size_t,
}
#[test]
fn bindgen_test_layout_HeapRegion() {
    assert_eq!(
        ::std::mem::size_of::<HeapRegion>(),
        16usize,
        concat!("Size of: ", stringify!(HeapRegion))
    );
    assert_eq!(
        ::std::mem::align_of::<HeapRegion>(),
        8usize,
        concat!("Alignment of ", stringify!(HeapRegion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapRegion>())).pucStartAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapRegion),
            "::",
            stringify!(pucStartAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapRegion>())).xSizeInBytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapRegion),
            "::",
            stringify!(xSizeInBytes)
        )
    );
}
pub type HeapRegion_t = HeapRegion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xHeapStats {
    pub xAvailableHeapSpaceInBytes: size_t,
    pub xSizeOfLargestFreeBlockInBytes: size_t,
    pub xSizeOfSmallestFreeBlockInBytes: size_t,
    pub xNumberOfFreeBlocks: size_t,
    pub xMinimumEverFreeBytesRemaining: size_t,
    pub xNumberOfSuccessfulAllocations: size_t,
    pub xNumberOfSuccessfulFrees: size_t,
}
#[test]
fn bindgen_test_layout_xHeapStats() {
    assert_eq!(
        ::std::mem::size_of::<xHeapStats>(),
        56usize,
        concat!("Size of: ", stringify!(xHeapStats))
    );
    assert_eq!(
        ::std::mem::align_of::<xHeapStats>(),
        8usize,
        concat!("Alignment of ", stringify!(xHeapStats))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xHeapStats>())).xAvailableHeapSpaceInBytes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xAvailableHeapSpaceInBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xHeapStats>())).xSizeOfLargestFreeBlockInBytes as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xSizeOfLargestFreeBlockInBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xHeapStats>())).xSizeOfSmallestFreeBlockInBytes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xSizeOfSmallestFreeBlockInBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xHeapStats>())).xNumberOfFreeBlocks as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xNumberOfFreeBlocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xHeapStats>())).xMinimumEverFreeBytesRemaining as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xMinimumEverFreeBytesRemaining)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xHeapStats>())).xNumberOfSuccessfulAllocations as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xNumberOfSuccessfulAllocations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xHeapStats>())).xNumberOfSuccessfulFrees as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xHeapStats),
            "::",
            stringify!(xNumberOfSuccessfulFrees)
        )
    );
}
pub type HeapStats_t = xHeapStats;
extern "C" {
    pub fn vPortDefineHeapRegions(pxHeapRegions: *const HeapRegion_t);
}
extern "C" {
    pub fn vPortGetHeapStats(pxHeapStats: *mut HeapStats_t);
}
extern "C" {
    pub fn pvPortMalloc(xSize: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pvPortCalloc(xNum: size_t, xSize: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vPortFree(pv: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vPortInitialiseBlocks();
}
extern "C" {
    pub fn xPortGetFreeHeapSize() -> size_t;
}
extern "C" {
    pub fn xPortGetMinimumEverFreeHeapSize() -> size_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " void vApplicationMallocFailedHook( void )"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " This hook function is called when allocation failed."]
    pub fn vApplicationMallocFailedHook();
}
extern "C" {
    pub fn xPortStartScheduler() -> BaseType_t;
}
extern "C" {
    pub fn vPortEndScheduler();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_xSTATIC_LIST_ITEM() {
    assert_eq!(
        ::std::mem::size_of::<xSTATIC_LIST_ITEM>(),
        40usize,
        concat!("Size of: ", stringify!(xSTATIC_LIST_ITEM))
    );
    assert_eq!(
        ::std::mem::align_of::<xSTATIC_LIST_ITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_LIST_ITEM>())).xDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST_ITEM),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_LIST_ITEM>())).pvDummy3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST_ITEM),
            "::",
            stringify!(pvDummy3)
        )
    );
}
pub type StaticListItem_t = xSTATIC_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_MINI_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_xSTATIC_MINI_LIST_ITEM() {
    assert_eq!(
        ::std::mem::size_of::<xSTATIC_MINI_LIST_ITEM>(),
        24usize,
        concat!("Size of: ", stringify!(xSTATIC_MINI_LIST_ITEM))
    );
    assert_eq!(
        ::std::mem::align_of::<xSTATIC_MINI_LIST_ITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_MINI_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_MINI_LIST_ITEM>())).xDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_MINI_LIST_ITEM),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_MINI_LIST_ITEM>())).pvDummy3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_MINI_LIST_ITEM),
            "::",
            stringify!(pvDummy3)
        )
    );
}
pub type StaticMiniListItem_t = xSTATIC_MINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST {
    pub uxDummy2: UBaseType_t,
    pub pvDummy3: *mut ::std::os::raw::c_void,
    pub xDummy4: StaticMiniListItem_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_LIST() {
    assert_eq!(
        ::std::mem::size_of::<xSTATIC_LIST>(),
        40usize,
        concat!("Size of: ", stringify!(xSTATIC_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<xSTATIC_LIST>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_LIST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_LIST>())).uxDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(uxDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_LIST>())).pvDummy3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(pvDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_LIST>())).xDummy4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(xDummy4)
        )
    );
}
pub type StaticList_t = xSTATIC_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TCB {
    pub pxDummy1: *mut ::std::os::raw::c_void,
    pub xDummy3: [StaticListItem_t; 2usize],
    pub uxDummy5: UBaseType_t,
    pub pxDummy6: *mut ::std::os::raw::c_void,
    pub ucDummy7: [u8; 10usize],
    pub uxDummy10: [UBaseType_t; 2usize],
    pub uxDummy12: [UBaseType_t; 2usize],
    pub ulDummy18: [u32; 1usize],
    pub ucDummy19: [u8; 1usize],
    pub uxDummy20: u8,
    pub ucDummy21: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_TCB() {
    assert_eq!(
        ::std::mem::size_of::<xSTATIC_TCB>(),
        160usize,
        concat!("Size of: ", stringify!(xSTATIC_TCB))
    );
    assert_eq!(
        ::std::mem::align_of::<xSTATIC_TCB>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_TCB))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).pxDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(pxDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).xDummy3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).uxDummy5 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).pxDummy6 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(pxDummy6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).ucDummy7 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ucDummy7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).uxDummy10 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).uxDummy12 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).ulDummy18 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ulDummy18)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).ucDummy19 as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ucDummy19)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).uxDummy20 as *const _ as usize },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy20)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TCB>())).ucDummy21 as *const _ as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ucDummy21)
        )
    );
}
pub type StaticTask_t = xSTATIC_TCB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_QUEUE {
    pub pvDummy1: [*mut ::std::os::raw::c_void; 3usize],
    pub u: xSTATIC_QUEUE__bindgen_ty_1,
    pub xDummy3: [StaticList_t; 2usize],
    pub uxDummy4: [UBaseType_t; 3usize],
    pub ucDummy5: [u8; 2usize],
    pub ucDummy6: u8,
    pub uxDummy8: UBaseType_t,
    pub ucDummy9: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xSTATIC_QUEUE__bindgen_ty_1 {
    pub pvDummy2: *mut ::std::os::raw::c_void,
    pub uxDummy2: UBaseType_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_QUEUE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xSTATIC_QUEUE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xSTATIC_QUEUE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xSTATIC_QUEUE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_QUEUE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xSTATIC_QUEUE__bindgen_ty_1>())).pvDummy2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE__bindgen_ty_1),
            "::",
            stringify!(pvDummy2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xSTATIC_QUEUE__bindgen_ty_1>())).uxDummy2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE__bindgen_ty_1),
            "::",
            stringify!(uxDummy2)
        )
    );
}
#[test]
fn bindgen_test_layout_xSTATIC_QUEUE() {
    assert_eq!(
        ::std::mem::size_of::<xSTATIC_QUEUE>(),
        160usize,
        concat!("Size of: ", stringify!(xSTATIC_QUEUE))
    );
    assert_eq!(
        ::std::mem::align_of::<xSTATIC_QUEUE>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_QUEUE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_QUEUE>())).pvDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(pvDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_QUEUE>())).u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_QUEUE>())).xDummy3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_QUEUE>())).uxDummy4 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(uxDummy4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_QUEUE>())).ucDummy5 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(ucDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_QUEUE>())).ucDummy6 as *const _ as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(ucDummy6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_QUEUE>())).uxDummy8 as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(uxDummy8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_QUEUE>())).ucDummy9 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(ucDummy9)
        )
    );
}
pub type StaticQueue_t = xSTATIC_QUEUE;
pub type StaticSemaphore_t = StaticQueue_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_EVENT_GROUP {
    pub xDummy1: TickType_t,
    pub xDummy2: StaticList_t,
    pub uxDummy3: UBaseType_t,
    pub ucDummy4: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_EVENT_GROUP() {
    assert_eq!(
        ::std::mem::size_of::<xSTATIC_EVENT_GROUP>(),
        64usize,
        concat!("Size of: ", stringify!(xSTATIC_EVENT_GROUP))
    );
    assert_eq!(
        ::std::mem::align_of::<xSTATIC_EVENT_GROUP>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_EVENT_GROUP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_EVENT_GROUP>())).xDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(xDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_EVENT_GROUP>())).xDummy2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_EVENT_GROUP>())).uxDummy3 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(uxDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_EVENT_GROUP>())).ucDummy4 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(ucDummy4)
        )
    );
}
pub type StaticEventGroup_t = xSTATIC_EVENT_GROUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TIMER {
    pub pvDummy1: *mut ::std::os::raw::c_void,
    pub xDummy2: StaticListItem_t,
    pub xDummy3: TickType_t,
    pub pvDummy5: *mut ::std::os::raw::c_void,
    pub pvDummy6: TaskFunction_t,
    pub uxDummy7: UBaseType_t,
    pub ucDummy8: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_TIMER() {
    assert_eq!(
        ::std::mem::size_of::<xSTATIC_TIMER>(),
        88usize,
        concat!("Size of: ", stringify!(xSTATIC_TIMER))
    );
    assert_eq!(
        ::std::mem::align_of::<xSTATIC_TIMER>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_TIMER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TIMER>())).pvDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TIMER>())).xDummy2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TIMER>())).xDummy3 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TIMER>())).pvDummy5 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TIMER>())).pvDummy6 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TIMER>())).uxDummy7 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(uxDummy7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_TIMER>())).ucDummy8 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(ucDummy8)
        )
    );
}
pub type StaticTimer_t = xSTATIC_TIMER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_STREAM_BUFFER {
    pub uxDummy1: [size_t; 4usize],
    pub pvDummy2: [*mut ::std::os::raw::c_void; 3usize],
    pub ucDummy3: u8,
    pub uxDummy4: UBaseType_t,
    pub uxDummy6: UBaseType_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_STREAM_BUFFER() {
    assert_eq!(
        ::std::mem::size_of::<xSTATIC_STREAM_BUFFER>(),
        80usize,
        concat!("Size of: ", stringify!(xSTATIC_STREAM_BUFFER))
    );
    assert_eq!(
        ::std::mem::align_of::<xSTATIC_STREAM_BUFFER>(),
        8usize,
        concat!("Alignment of ", stringify!(xSTATIC_STREAM_BUFFER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_STREAM_BUFFER>())).uxDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(uxDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_STREAM_BUFFER>())).pvDummy2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(pvDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_STREAM_BUFFER>())).ucDummy3 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(ucDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_STREAM_BUFFER>())).uxDummy4 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(uxDummy4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSTATIC_STREAM_BUFFER>())).uxDummy6 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(uxDummy6)
        )
    );
}
pub type StaticStreamBuffer_t = xSTATIC_STREAM_BUFFER;
pub type StaticMessageBuffer_t = StaticStreamBuffer_t;
